
display1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003048  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080031f8  080031f8  000041f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003250  08003250  00005058  2**0
                  CONTENTS
  4 .ARM          00000000  08003250  08003250  00005058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003250  08003250  00005058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003250  08003250  00004250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003254  08003254  00004254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08003258  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005058  2**0
                  CONTENTS
 10 .bss          00004b44  20000058  20000058  00005058  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b9c  20004b9c  00005058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc88  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ab9  00000000  00000000  00010d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  000127d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c2  00000000  00000000  000130c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d0e6  00000000  00000000  00013782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a23d  00000000  00000000  00030868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1631  00000000  00000000  0003aaa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dc0d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026f0  00000000  00000000  000dc11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  000de80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000058 	.word	0x20000058
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080031e0 	.word	0x080031e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	080031e0 	.word	0x080031e0

080001f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	6039      	str	r1, [r7, #0]
 80001fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000200:	2b00      	cmp	r3, #0
 8000202:	db0a      	blt.n	800021a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	b2da      	uxtb	r2, r3
 8000208:	490c      	ldr	r1, [pc, #48]	@ (800023c <__NVIC_SetPriority+0x4c>)
 800020a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020e:	0112      	lsls	r2, r2, #4
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	440b      	add	r3, r1
 8000214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000218:	e00a      	b.n	8000230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	b2da      	uxtb	r2, r3
 800021e:	4908      	ldr	r1, [pc, #32]	@ (8000240 <__NVIC_SetPriority+0x50>)
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	f003 030f 	and.w	r3, r3, #15
 8000226:	3b04      	subs	r3, #4
 8000228:	0112      	lsls	r2, r2, #4
 800022a:	b2d2      	uxtb	r2, r2
 800022c:	440b      	add	r3, r1
 800022e:	761a      	strb	r2, [r3, #24]
}
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	e000e100 	.word	0xe000e100
 8000240:	e000ed00 	.word	0xe000ed00

08000244 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8000248:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <SysTick_Handler+0x1c>)
 800024a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800024c:	f001 fd2a 	bl	8001ca4 <xTaskGetSchedulerState>
 8000250:	4603      	mov	r3, r0
 8000252:	2b01      	cmp	r3, #1
 8000254:	d001      	beq.n	800025a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8000256:	f002 fb1f 	bl	8002898 <xPortSysTickHandler>
  }
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	e000e010 	.word	0xe000e010

08000264 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8000268:	2100      	movs	r1, #0
 800026a:	f06f 0004 	mvn.w	r0, #4
 800026e:	f7ff ffbf 	bl	80001f0 <__NVIC_SetPriority>
#endif
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800027e:	f3ef 8305 	mrs	r3, IPSR
 8000282:	603b      	str	r3, [r7, #0]
  return(result);
 8000284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000286:	2b00      	cmp	r3, #0
 8000288:	d003      	beq.n	8000292 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800028a:	f06f 0305 	mvn.w	r3, #5
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	e00c      	b.n	80002ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8000292:	4b0a      	ldr	r3, [pc, #40]	@ (80002bc <osKernelInitialize+0x44>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d105      	bne.n	80002a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800029a:	4b08      	ldr	r3, [pc, #32]	@ (80002bc <osKernelInitialize+0x44>)
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80002a0:	2300      	movs	r3, #0
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	e002      	b.n	80002ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80002a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80002ac:	687b      	ldr	r3, [r7, #4]
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	20000074 	.word	0x20000074

080002c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80002c6:	f3ef 8305 	mrs	r3, IPSR
 80002ca:	603b      	str	r3, [r7, #0]
  return(result);
 80002cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d003      	beq.n	80002da <osKernelStart+0x1a>
    stat = osErrorISR;
 80002d2:	f06f 0305 	mvn.w	r3, #5
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	e010      	b.n	80002fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80002da:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <osKernelStart+0x48>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d109      	bne.n	80002f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80002e2:	f7ff ffbf 	bl	8000264 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80002e6:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <osKernelStart+0x48>)
 80002e8:	2202      	movs	r2, #2
 80002ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80002ec:	f001 f876 	bl	80013dc <vTaskStartScheduler>
      stat = osOK;
 80002f0:	2300      	movs	r3, #0
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	e002      	b.n	80002fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80002f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80002fc:	687b      	ldr	r3, [r7, #4]
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000074 	.word	0x20000074

0800030c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b08e      	sub	sp, #56	@ 0x38
 8000310:	af04      	add	r7, sp, #16
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8000318:	2300      	movs	r3, #0
 800031a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800031c:	f3ef 8305 	mrs	r3, IPSR
 8000320:	617b      	str	r3, [r7, #20]
  return(result);
 8000322:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8000324:	2b00      	cmp	r3, #0
 8000326:	d17e      	bne.n	8000426 <osThreadNew+0x11a>
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d07b      	beq.n	8000426 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800032e:	2380      	movs	r3, #128	@ 0x80
 8000330:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8000332:	2318      	movs	r3, #24
 8000334:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8000336:	2300      	movs	r3, #0
 8000338:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800033a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800033e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d045      	beq.n	80003d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d002      	beq.n	8000354 <osThreadNew+0x48>
        name = attr->name;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d002      	beq.n	8000362 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d008      	beq.n	800037a <osThreadNew+0x6e>
 8000368:	69fb      	ldr	r3, [r7, #28]
 800036a:	2b38      	cmp	r3, #56	@ 0x38
 800036c:	d805      	bhi.n	800037a <osThreadNew+0x6e>
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <osThreadNew+0x72>
        return (NULL);
 800037a:	2300      	movs	r3, #0
 800037c:	e054      	b.n	8000428 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d003      	beq.n	800038e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	089b      	lsrs	r3, r3, #2
 800038c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00e      	beq.n	80003b4 <osThreadNew+0xa8>
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	2ba7      	cmp	r3, #167	@ 0xa7
 800039c:	d90a      	bls.n	80003b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d006      	beq.n	80003b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d002      	beq.n	80003b4 <osThreadNew+0xa8>
        mem = 1;
 80003ae:	2301      	movs	r3, #1
 80003b0:	61bb      	str	r3, [r7, #24]
 80003b2:	e010      	b.n	80003d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d10c      	bne.n	80003d6 <osThreadNew+0xca>
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d108      	bne.n	80003d6 <osThreadNew+0xca>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d104      	bne.n	80003d6 <osThreadNew+0xca>
          mem = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
 80003d0:	e001      	b.n	80003d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80003d6:	69bb      	ldr	r3, [r7, #24]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d110      	bne.n	80003fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80003e4:	9202      	str	r2, [sp, #8]
 80003e6:	9301      	str	r3, [sp, #4]
 80003e8:	69fb      	ldr	r3, [r7, #28]
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	6a3a      	ldr	r2, [r7, #32]
 80003f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80003f2:	68f8      	ldr	r0, [r7, #12]
 80003f4:	f000 fdfe 	bl	8000ff4 <xTaskCreateStatic>
 80003f8:	4603      	mov	r3, r0
 80003fa:	613b      	str	r3, [r7, #16]
 80003fc:	e013      	b.n	8000426 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80003fe:	69bb      	ldr	r3, [r7, #24]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d110      	bne.n	8000426 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000404:	6a3b      	ldr	r3, [r7, #32]
 8000406:	b29a      	uxth	r2, r3
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	9301      	str	r3, [sp, #4]
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000416:	68f8      	ldr	r0, [r7, #12]
 8000418:	f000 fe4c 	bl	80010b4 <xTaskCreate>
 800041c:	4603      	mov	r3, r0
 800041e:	2b01      	cmp	r3, #1
 8000420:	d001      	beq.n	8000426 <osThreadNew+0x11a>
            hTask = NULL;
 8000422:	2300      	movs	r3, #0
 8000424:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8000426:	693b      	ldr	r3, [r7, #16]
}
 8000428:	4618      	mov	r0, r3
 800042a:	3728      	adds	r7, #40	@ 0x28
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	4a07      	ldr	r2, [pc, #28]	@ (800045c <vApplicationGetIdleTaskMemory+0x2c>)
 8000440:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	4a06      	ldr	r2, [pc, #24]	@ (8000460 <vApplicationGetIdleTaskMemory+0x30>)
 8000446:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2280      	movs	r2, #128	@ 0x80
 800044c:	601a      	str	r2, [r3, #0]
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	20000078 	.word	0x20000078
 8000460:	20000120 	.word	0x20000120

08000464 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	4a07      	ldr	r2, [pc, #28]	@ (8000490 <vApplicationGetTimerTaskMemory+0x2c>)
 8000474:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	4a06      	ldr	r2, [pc, #24]	@ (8000494 <vApplicationGetTimerTaskMemory+0x30>)
 800047a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000482:	601a      	str	r2, [r3, #0]
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	20000320 	.word	0x20000320
 8000494:	200003c8 	.word	0x200003c8

08000498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f103 0208 	add.w	r2, r3, #8
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80004b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f103 0208 	add.w	r2, r3, #8
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f103 0208 	add.w	r2, r3, #8
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80004f2:	b480      	push	{r7}
 80004f4:	b085      	sub	sp, #20
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
 80004fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	689a      	ldr	r2, [r3, #8]
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	601a      	str	r2, [r3, #0]
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800053a:	b480      	push	{r7}
 800053c:	b085      	sub	sp, #20
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000550:	d103      	bne.n	800055a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	691b      	ldr	r3, [r3, #16]
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	e00c      	b.n	8000574 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3308      	adds	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	e002      	b.n	8000568 <vListInsert+0x2e>
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	429a      	cmp	r2, r3
 8000572:	d2f6      	bcs.n	8000562 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	601a      	str	r2, [r3, #0]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	691b      	ldr	r3, [r3, #16]
 80005b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	6892      	ldr	r2, [r2, #8]
 80005c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	6852      	ldr	r2, [r2, #4]
 80005cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d103      	bne.n	80005e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	689a      	ldr	r2, [r3, #8]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	1e5a      	subs	r2, r3, #1
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d10b      	bne.n	800062c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800062c:	f002 f8a4 	bl	8002778 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000638:	68f9      	ldr	r1, [r7, #12]
 800063a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800063c:	fb01 f303 	mul.w	r3, r1, r3
 8000640:	441a      	add	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2200      	movs	r2, #0
 800064a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800065c:	3b01      	subs	r3, #1
 800065e:	68f9      	ldr	r1, [r7, #12]
 8000660:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000662:	fb01 f303 	mul.w	r3, r1, r3
 8000666:	441a      	add	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	22ff      	movs	r2, #255	@ 0xff
 8000670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	22ff      	movs	r2, #255	@ 0xff
 8000678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d114      	bne.n	80006ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d01a      	beq.n	80006c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	3310      	adds	r3, #16
 800068e:	4618      	mov	r0, r3
 8000690:	f001 f942 	bl	8001918 <xTaskRemoveFromEventList>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d012      	beq.n	80006c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <xQueueGenericReset+0xd0>)
 800069c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	f3bf 8f6f 	isb	sy
 80006aa:	e009      	b.n	80006c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3310      	adds	r3, #16
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fef1 	bl	8000498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3324      	adds	r3, #36	@ 0x24
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff feec 	bl	8000498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80006c0:	f002 f88c 	bl	80027dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80006c4:	2301      	movs	r3, #1
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	e000ed04 	.word	0xe000ed04

080006d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08e      	sub	sp, #56	@ 0x38
 80006d8:	af02      	add	r7, sp, #8
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10b      	bne.n	8000700 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80006e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ec:	f383 8811 	msr	BASEPRI, r3
 80006f0:	f3bf 8f6f 	isb	sy
 80006f4:	f3bf 8f4f 	dsb	sy
 80006f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d10b      	bne.n	800071e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8000706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800070a:	f383 8811 	msr	BASEPRI, r3
 800070e:	f3bf 8f6f 	isb	sy
 8000712:	f3bf 8f4f 	dsb	sy
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	e7fd      	b.n	800071a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d002      	beq.n	800072a <xQueueGenericCreateStatic+0x56>
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <xQueueGenericCreateStatic+0x5a>
 800072a:	2301      	movs	r3, #1
 800072c:	e000      	b.n	8000730 <xQueueGenericCreateStatic+0x5c>
 800072e:	2300      	movs	r3, #0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d10b      	bne.n	800074c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8000734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000738:	f383 8811 	msr	BASEPRI, r3
 800073c:	f3bf 8f6f 	isb	sy
 8000740:	f3bf 8f4f 	dsb	sy
 8000744:	623b      	str	r3, [r7, #32]
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d102      	bne.n	8000758 <xQueueGenericCreateStatic+0x84>
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <xQueueGenericCreateStatic+0x88>
 8000758:	2301      	movs	r3, #1
 800075a:	e000      	b.n	800075e <xQueueGenericCreateStatic+0x8a>
 800075c:	2300      	movs	r3, #0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d10b      	bne.n	800077a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8000762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000766:	f383 8811 	msr	BASEPRI, r3
 800076a:	f3bf 8f6f 	isb	sy
 800076e:	f3bf 8f4f 	dsb	sy
 8000772:	61fb      	str	r3, [r7, #28]
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	e7fd      	b.n	8000776 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800077a:	2350      	movs	r3, #80	@ 0x50
 800077c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	2b50      	cmp	r3, #80	@ 0x50
 8000782:	d00b      	beq.n	800079c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8000784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000788:	f383 8811 	msr	BASEPRI, r3
 800078c:	f3bf 8f6f 	isb	sy
 8000790:	f3bf 8f4f 	dsb	sy
 8000794:	61bb      	str	r3, [r7, #24]
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800079c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80007a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00d      	beq.n	80007c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80007a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007aa:	2201      	movs	r2, #1
 80007ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80007b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80007b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	4613      	mov	r3, r2
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	68f8      	ldr	r0, [r7, #12]
 80007c0:	f000 f805 	bl	80007ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80007c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3730      	adds	r7, #48	@ 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b084      	sub	sp, #16
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d103      	bne.n	80007ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	69ba      	ldr	r2, [r7, #24]
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	e002      	b.n	80007f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007fc:	2101      	movs	r1, #1
 80007fe:	69b8      	ldr	r0, [r7, #24]
 8000800:	f7ff fefe 	bl	8000600 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	78fa      	ldrb	r2, [r7, #3]
 8000808:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	@ 0x38
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000822:	2300      	movs	r3, #0
 8000824:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800082a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800082c:	2b00      	cmp	r3, #0
 800082e:	d10b      	bne.n	8000848 <xQueueGenericSend+0x34>
	__asm volatile
 8000830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000834:	f383 8811 	msr	BASEPRI, r3
 8000838:	f3bf 8f6f 	isb	sy
 800083c:	f3bf 8f4f 	dsb	sy
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000842:	bf00      	nop
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d103      	bne.n	8000856 <xQueueGenericSend+0x42>
 800084e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <xQueueGenericSend+0x46>
 8000856:	2301      	movs	r3, #1
 8000858:	e000      	b.n	800085c <xQueueGenericSend+0x48>
 800085a:	2300      	movs	r3, #0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10b      	bne.n	8000878 <xQueueGenericSend+0x64>
	__asm volatile
 8000860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000864:	f383 8811 	msr	BASEPRI, r3
 8000868:	f3bf 8f6f 	isb	sy
 800086c:	f3bf 8f4f 	dsb	sy
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d103      	bne.n	8000886 <xQueueGenericSend+0x72>
 800087e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000882:	2b01      	cmp	r3, #1
 8000884:	d101      	bne.n	800088a <xQueueGenericSend+0x76>
 8000886:	2301      	movs	r3, #1
 8000888:	e000      	b.n	800088c <xQueueGenericSend+0x78>
 800088a:	2300      	movs	r3, #0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d10b      	bne.n	80008a8 <xQueueGenericSend+0x94>
	__asm volatile
 8000890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000894:	f383 8811 	msr	BASEPRI, r3
 8000898:	f3bf 8f6f 	isb	sy
 800089c:	f3bf 8f4f 	dsb	sy
 80008a0:	623b      	str	r3, [r7, #32]
}
 80008a2:	bf00      	nop
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008a8:	f001 f9fc 	bl	8001ca4 <xTaskGetSchedulerState>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <xQueueGenericSend+0xa4>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <xQueueGenericSend+0xa8>
 80008b8:	2301      	movs	r3, #1
 80008ba:	e000      	b.n	80008be <xQueueGenericSend+0xaa>
 80008bc:	2300      	movs	r3, #0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10b      	bne.n	80008da <xQueueGenericSend+0xc6>
	__asm volatile
 80008c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008c6:	f383 8811 	msr	BASEPRI, r3
 80008ca:	f3bf 8f6f 	isb	sy
 80008ce:	f3bf 8f4f 	dsb	sy
 80008d2:	61fb      	str	r3, [r7, #28]
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	e7fd      	b.n	80008d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80008da:	f001 ff4d 	bl	8002778 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80008de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d302      	bcc.n	80008f0 <xQueueGenericSend+0xdc>
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d129      	bne.n	8000944 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80008f6:	f000 fa0f 	bl	8000d18 <prvCopyDataToQueue>
 80008fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000900:	2b00      	cmp	r3, #0
 8000902:	d010      	beq.n	8000926 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000906:	3324      	adds	r3, #36	@ 0x24
 8000908:	4618      	mov	r0, r3
 800090a:	f001 f805 	bl	8001918 <xTaskRemoveFromEventList>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d013      	beq.n	800093c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000914:	4b3f      	ldr	r3, [pc, #252]	@ (8000a14 <xQueueGenericSend+0x200>)
 8000916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	f3bf 8f4f 	dsb	sy
 8000920:	f3bf 8f6f 	isb	sy
 8000924:	e00a      	b.n	800093c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000928:	2b00      	cmp	r3, #0
 800092a:	d007      	beq.n	800093c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800092c:	4b39      	ldr	r3, [pc, #228]	@ (8000a14 <xQueueGenericSend+0x200>)
 800092e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	f3bf 8f4f 	dsb	sy
 8000938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800093c:	f001 ff4e 	bl	80027dc <vPortExitCritical>
				return pdPASS;
 8000940:	2301      	movs	r3, #1
 8000942:	e063      	b.n	8000a0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d103      	bne.n	8000952 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800094a:	f001 ff47 	bl	80027dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800094e:	2300      	movs	r3, #0
 8000950:	e05c      	b.n	8000a0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000954:	2b00      	cmp	r3, #0
 8000956:	d106      	bne.n	8000966 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f001 f83f 	bl	80019e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000962:	2301      	movs	r3, #1
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000966:	f001 ff39 	bl	80027dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800096a:	f000 fda7 	bl	80014bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800096e:	f001 ff03 	bl	8002778 <vPortEnterCritical>
 8000972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000974:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000978:	b25b      	sxtb	r3, r3
 800097a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800097e:	d103      	bne.n	8000988 <xQueueGenericSend+0x174>
 8000980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800098a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800098e:	b25b      	sxtb	r3, r3
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000994:	d103      	bne.n	800099e <xQueueGenericSend+0x18a>
 8000996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800099e:	f001 ff1d 	bl	80027dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009a2:	1d3a      	adds	r2, r7, #4
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 f82e 	bl	8001a0c <xTaskCheckForTimeOut>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d124      	bne.n	8000a00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80009b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009b8:	f000 faa6 	bl	8000f08 <prvIsQueueFull>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d018      	beq.n	80009f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80009c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c4:	3310      	adds	r3, #16
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 ff52 	bl	8001874 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80009d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009d2:	f000 fa31 	bl	8000e38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80009d6:	f000 fd7f 	bl	80014d8 <xTaskResumeAll>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f47f af7c 	bne.w	80008da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <xQueueGenericSend+0x200>)
 80009e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	f3bf 8f6f 	isb	sy
 80009f2:	e772      	b.n	80008da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80009f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009f6:	f000 fa1f 	bl	8000e38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80009fa:	f000 fd6d 	bl	80014d8 <xTaskResumeAll>
 80009fe:	e76c      	b.n	80008da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000a00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a02:	f000 fa19 	bl	8000e38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000a06:	f000 fd67 	bl	80014d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000a0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3738      	adds	r7, #56	@ 0x38
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	e000ed04 	.word	0xe000ed04

08000a18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b090      	sub	sp, #64	@ 0x40
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8000a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10b      	bne.n	8000a48 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8000a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a34:	f383 8811 	msr	BASEPRI, r3
 8000a38:	f3bf 8f6f 	isb	sy
 8000a3c:	f3bf 8f4f 	dsb	sy
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d103      	bne.n	8000a56 <xQueueGenericSendFromISR+0x3e>
 8000a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <xQueueGenericSendFromISR+0x42>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <xQueueGenericSendFromISR+0x44>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10b      	bne.n	8000a78 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8000a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a64:	f383 8811 	msr	BASEPRI, r3
 8000a68:	f3bf 8f6f 	isb	sy
 8000a6c:	f3bf 8f4f 	dsb	sy
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d103      	bne.n	8000a86 <xQueueGenericSendFromISR+0x6e>
 8000a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d101      	bne.n	8000a8a <xQueueGenericSendFromISR+0x72>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <xQueueGenericSendFromISR+0x74>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d10b      	bne.n	8000aa8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8000a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a94:	f383 8811 	msr	BASEPRI, r3
 8000a98:	f3bf 8f6f 	isb	sy
 8000a9c:	f3bf 8f4f 	dsb	sy
 8000aa0:	623b      	str	r3, [r7, #32]
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000aa8:	f001 ff46 	bl	8002938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000aac:	f3ef 8211 	mrs	r2, BASEPRI
 8000ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ab4:	f383 8811 	msr	BASEPRI, r3
 8000ab8:	f3bf 8f6f 	isb	sy
 8000abc:	f3bf 8f4f 	dsb	sy
 8000ac0:	61fa      	str	r2, [r7, #28]
 8000ac2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000ac4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000ac6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d302      	bcc.n	8000ada <xQueueGenericSendFromISR+0xc2>
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d12f      	bne.n	8000b3a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000adc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000ae0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000af0:	f000 f912 	bl	8000d18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000af4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000afc:	d112      	bne.n	8000b24 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d016      	beq.n	8000b34 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b08:	3324      	adds	r3, #36	@ 0x24
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 ff04 	bl	8001918 <xTaskRemoveFromEventList>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00e      	beq.n	8000b34 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00b      	beq.n	8000b34 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	e007      	b.n	8000b34 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000b24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	b25a      	sxtb	r2, r3
 8000b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8000b34:	2301      	movs	r3, #1
 8000b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8000b38:	e001      	b.n	8000b3e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b40:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000b48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3740      	adds	r7, #64	@ 0x40
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	@ 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10b      	bne.n	8000b86 <xQueueReceive+0x32>
	__asm volatile
 8000b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b72:	f383 8811 	msr	BASEPRI, r3
 8000b76:	f3bf 8f6f 	isb	sy
 8000b7a:	f3bf 8f4f 	dsb	sy
 8000b7e:	623b      	str	r3, [r7, #32]
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	e7fd      	b.n	8000b82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d103      	bne.n	8000b94 <xQueueReceive+0x40>
 8000b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <xQueueReceive+0x44>
 8000b94:	2301      	movs	r3, #1
 8000b96:	e000      	b.n	8000b9a <xQueueReceive+0x46>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10b      	bne.n	8000bb6 <xQueueReceive+0x62>
	__asm volatile
 8000b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ba2:	f383 8811 	msr	BASEPRI, r3
 8000ba6:	f3bf 8f6f 	isb	sy
 8000baa:	f3bf 8f4f 	dsb	sy
 8000bae:	61fb      	str	r3, [r7, #28]
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	e7fd      	b.n	8000bb2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000bb6:	f001 f875 	bl	8001ca4 <xTaskGetSchedulerState>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <xQueueReceive+0x72>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <xQueueReceive+0x76>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e000      	b.n	8000bcc <xQueueReceive+0x78>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10b      	bne.n	8000be8 <xQueueReceive+0x94>
	__asm volatile
 8000bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bd4:	f383 8811 	msr	BASEPRI, r3
 8000bd8:	f3bf 8f6f 	isb	sy
 8000bdc:	f3bf 8f4f 	dsb	sy
 8000be0:	61bb      	str	r3, [r7, #24]
}
 8000be2:	bf00      	nop
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000be8:	f001 fdc6 	bl	8002778 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d01f      	beq.n	8000c38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bfc:	f000 f8f6 	bl	8000dec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	1e5a      	subs	r2, r3, #1
 8000c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c06:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d00f      	beq.n	8000c30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c12:	3310      	adds	r3, #16
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 fe7f 	bl	8001918 <xTaskRemoveFromEventList>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d007      	beq.n	8000c30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000c20:	4b3c      	ldr	r3, [pc, #240]	@ (8000d14 <xQueueReceive+0x1c0>)
 8000c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	f3bf 8f4f 	dsb	sy
 8000c2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000c30:	f001 fdd4 	bl	80027dc <vPortExitCritical>
				return pdPASS;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e069      	b.n	8000d0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d103      	bne.n	8000c46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000c3e:	f001 fdcd 	bl	80027dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e062      	b.n	8000d0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d106      	bne.n	8000c5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fec5 	bl	80019e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000c56:	2301      	movs	r3, #1
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000c5a:	f001 fdbf 	bl	80027dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000c5e:	f000 fc2d 	bl	80014bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000c62:	f001 fd89 	bl	8002778 <vPortEnterCritical>
 8000c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000c6c:	b25b      	sxtb	r3, r3
 8000c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c72:	d103      	bne.n	8000c7c <xQueueReceive+0x128>
 8000c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c88:	d103      	bne.n	8000c92 <xQueueReceive+0x13e>
 8000c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000c92:	f001 fda3 	bl	80027dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c96:	1d3a      	adds	r2, r7, #4
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 feb4 	bl	8001a0c <xTaskCheckForTimeOut>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d123      	bne.n	8000cf2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000caa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000cac:	f000 f916 	bl	8000edc <prvIsQueueEmpty>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d017      	beq.n	8000ce6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb8:	3324      	adds	r3, #36	@ 0x24
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fdd8 	bl	8001874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000cc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000cc6:	f000 f8b7 	bl	8000e38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000cca:	f000 fc05 	bl	80014d8 <xTaskResumeAll>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d189      	bne.n	8000be8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <xQueueReceive+0x1c0>)
 8000cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	f3bf 8f6f 	isb	sy
 8000ce4:	e780      	b.n	8000be8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ce8:	f000 f8a6 	bl	8000e38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000cec:	f000 fbf4 	bl	80014d8 <xTaskResumeAll>
 8000cf0:	e77a      	b.n	8000be8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000cf4:	f000 f8a0 	bl	8000e38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000cf8:	f000 fbee 	bl	80014d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000cfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000cfe:	f000 f8ed 	bl	8000edc <prvIsQueueEmpty>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f43f af6f 	beq.w	8000be8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000d0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3730      	adds	r7, #48	@ 0x30
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	e000ed04 	.word	0xe000ed04

08000d18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10d      	bne.n	8000d52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d14d      	bne.n	8000dda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 ffcc 	bl	8001ce0 <xTaskPriorityDisinherit>
 8000d48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	e043      	b.n	8000dda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d119      	bne.n	8000d8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6858      	ldr	r0, [r3, #4]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d60:	461a      	mov	r2, r3
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	f002 f9d8 	bl	8003118 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d70:	441a      	add	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d32b      	bcc.n	8000dda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	e026      	b.n	8000dda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	68d8      	ldr	r0, [r3, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	461a      	mov	r2, r3
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	f002 f9be 	bl	8003118 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	425b      	negs	r3, r3
 8000da6:	441a      	add	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	425b      	negs	r3, r3
 8000dc2:	441a      	add	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d105      	bne.n	8000dda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8000de2:	697b      	ldr	r3, [r7, #20]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d018      	beq.n	8000e30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	441a      	add	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d303      	bcc.n	8000e20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68d9      	ldr	r1, [r3, #12]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	461a      	mov	r2, r3
 8000e2a:	6838      	ldr	r0, [r7, #0]
 8000e2c:	f002 f974 	bl	8003118 <memcpy>
	}
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000e40:	f001 fc9a 	bl	8002778 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000e4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e4c:	e011      	b.n	8000e72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d012      	beq.n	8000e7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3324      	adds	r3, #36	@ 0x24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fd5c 	bl	8001918 <xTaskRemoveFromEventList>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000e66:	f000 fe35 	bl	8001ad4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	dce9      	bgt.n	8000e4e <prvUnlockQueue+0x16>
 8000e7a:	e000      	b.n	8000e7e <prvUnlockQueue+0x46>
					break;
 8000e7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	22ff      	movs	r2, #255	@ 0xff
 8000e82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8000e86:	f001 fca9 	bl	80027dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000e8a:	f001 fc75 	bl	8002778 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000e94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e96:	e011      	b.n	8000ebc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d012      	beq.n	8000ec6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3310      	adds	r3, #16
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fd37 	bl	8001918 <xTaskRemoveFromEventList>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8000eb0:	f000 fe10 	bl	8001ad4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dce9      	bgt.n	8000e98 <prvUnlockQueue+0x60>
 8000ec4:	e000      	b.n	8000ec8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8000ec6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	22ff      	movs	r2, #255	@ 0xff
 8000ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8000ed0:	f001 fc84 	bl	80027dc <vPortExitCritical>
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000ee4:	f001 fc48 	bl	8002778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e001      	b.n	8000efa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000efa:	f001 fc6f 	bl	80027dc <vPortExitCritical>

	return xReturn;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000f10:	f001 fc32 	bl	8002778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d102      	bne.n	8000f26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e001      	b.n	8000f2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000f2a:	f001 fc57 	bl	80027dc <vPortExitCritical>

	return xReturn;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	e014      	b.n	8000f72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000f48:	4a0f      	ldr	r2, [pc, #60]	@ (8000f88 <vQueueAddToRegistry+0x50>)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10b      	bne.n	8000f6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <vQueueAddToRegistry+0x50>)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <vQueueAddToRegistry+0x50>)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	4413      	add	r3, r2
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8000f6a:	e006      	b.n	8000f7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b07      	cmp	r3, #7
 8000f76:	d9e7      	bls.n	8000f48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200007c8 	.word	0x200007c8

08000f8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8000f9c:	f001 fbec 	bl	8002778 <vPortEnterCritical>
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fac:	d103      	bne.n	8000fb6 <vQueueWaitForMessageRestricted+0x2a>
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fc2:	d103      	bne.n	8000fcc <vQueueWaitForMessageRestricted+0x40>
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000fcc:	f001 fc06 	bl	80027dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d106      	bne.n	8000fe6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3324      	adds	r3, #36	@ 0x24
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fc6d 	bl	80018c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff26 	bl	8000e38 <prvUnlockQueue>
	}
 8000fec:	bf00      	nop
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	@ 0x38
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10b      	bne.n	8001020 <xTaskCreateStatic+0x2c>
	__asm volatile
 8001008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800100c:	f383 8811 	msr	BASEPRI, r3
 8001010:	f3bf 8f6f 	isb	sy
 8001014:	f3bf 8f4f 	dsb	sy
 8001018:	623b      	str	r3, [r7, #32]
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10b      	bne.n	800103e <xTaskCreateStatic+0x4a>
	__asm volatile
 8001026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800102a:	f383 8811 	msr	BASEPRI, r3
 800102e:	f3bf 8f6f 	isb	sy
 8001032:	f3bf 8f4f 	dsb	sy
 8001036:	61fb      	str	r3, [r7, #28]
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	e7fd      	b.n	800103a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800103e:	23a8      	movs	r3, #168	@ 0xa8
 8001040:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	2ba8      	cmp	r3, #168	@ 0xa8
 8001046:	d00b      	beq.n	8001060 <xTaskCreateStatic+0x6c>
	__asm volatile
 8001048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800104c:	f383 8811 	msr	BASEPRI, r3
 8001050:	f3bf 8f6f 	isb	sy
 8001054:	f3bf 8f4f 	dsb	sy
 8001058:	61bb      	str	r3, [r7, #24]
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001060:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001064:	2b00      	cmp	r3, #0
 8001066:	d01e      	beq.n	80010a6 <xTaskCreateStatic+0xb2>
 8001068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800106a:	2b00      	cmp	r3, #0
 800106c:	d01b      	beq.n	80010a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800106e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001076:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	2202      	movs	r2, #2
 800107c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001080:	2300      	movs	r3, #0
 8001082:	9303      	str	r3, [sp, #12]
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 f851 	bl	8001140 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800109e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010a0:	f000 f8f6 	bl	8001290 <prvAddNewTaskToReadyList>
 80010a4:	e001      	b.n	80010aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80010aa:	697b      	ldr	r3, [r7, #20]
	}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3728      	adds	r7, #40	@ 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	@ 0x30
 80010b8:	af04      	add	r7, sp, #16
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	4613      	mov	r3, r2
 80010c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fc77 	bl	80029bc <pvPortMalloc>
 80010ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00e      	beq.n	80010f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80010d6:	20a8      	movs	r0, #168	@ 0xa8
 80010d8:	f001 fc70 	bl	80029bc <pvPortMalloc>
 80010dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80010ea:	e005      	b.n	80010f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80010ec:	6978      	ldr	r0, [r7, #20]
 80010ee:	f001 fd33 	bl	8002b58 <vPortFree>
 80010f2:	e001      	b.n	80010f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d017      	beq.n	800112e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001106:	88fa      	ldrh	r2, [r7, #6]
 8001108:	2300      	movs	r3, #0
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 f80f 	bl	8001140 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001122:	69f8      	ldr	r0, [r7, #28]
 8001124:	f000 f8b4 	bl	8001290 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001128:	2301      	movs	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	e002      	b.n	8001134 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001132:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001134:	69bb      	ldr	r3, [r7, #24]
	}
 8001136:	4618      	mov	r0, r3
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800114e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001150:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	21a5      	movs	r1, #165	@ 0xa5
 800115a:	f001 ff58 	bl	800300e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800115e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001168:	3b01      	subs	r3, #1
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	f023 0307 	bic.w	r3, r3, #7
 8001176:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8001182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001186:	f383 8811 	msr	BASEPRI, r3
 800118a:	f3bf 8f6f 	isb	sy
 800118e:	f3bf 8f4f 	dsb	sy
 8001192:	617b      	str	r3, [r7, #20]
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	e7fd      	b.n	8001196 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d01f      	beq.n	80011e0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	e012      	b.n	80011cc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	4413      	add	r3, r2
 80011ac:	7819      	ldrb	r1, [r3, #0]
 80011ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	4413      	add	r3, r2
 80011b4:	3334      	adds	r3, #52	@ 0x34
 80011b6:	460a      	mov	r2, r1
 80011b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3301      	adds	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	d9e9      	bls.n	80011a6 <prvInitialiseNewTask+0x66>
 80011d2:	e000      	b.n	80011d6 <prvInitialiseNewTask+0x96>
			{
				break;
 80011d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80011d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80011de:	e003      	b.n	80011e8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80011e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80011e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ea:	2b37      	cmp	r3, #55	@ 0x37
 80011ec:	d901      	bls.n	80011f2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80011ee:	2337      	movs	r3, #55	@ 0x37
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80011f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80011f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011fc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80011fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001200:	2200      	movs	r2, #0
 8001202:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001206:	3304      	adds	r3, #4
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f965 	bl	80004d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800120e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001210:	3318      	adds	r3, #24
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f960 	bl	80004d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800121a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800121c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800121e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001220:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8001224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001226:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800122a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800122e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001230:	2200      	movs	r2, #0
 8001232:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001238:	2200      	movs	r2, #0
 800123a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800123e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001240:	3354      	adds	r3, #84	@ 0x54
 8001242:	224c      	movs	r2, #76	@ 0x4c
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fee1 	bl	800300e <memset>
 800124c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800124e:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <prvInitialiseNewTask+0x144>)
 8001250:	659a      	str	r2, [r3, #88]	@ 0x58
 8001252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001254:	4a0c      	ldr	r2, [pc, #48]	@ (8001288 <prvInitialiseNewTask+0x148>)
 8001256:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800125a:	4a0c      	ldr	r2, [pc, #48]	@ (800128c <prvInitialiseNewTask+0x14c>)
 800125c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	68f9      	ldr	r1, [r7, #12]
 8001262:	69b8      	ldr	r0, [r7, #24]
 8001264:	f001 f95a 	bl	800251c <pxPortInitialiseStack>
 8001268:	4602      	mov	r2, r0
 800126a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800126c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800126e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800127a:	bf00      	nop
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20004a5c 	.word	0x20004a5c
 8001288:	20004ac4 	.word	0x20004ac4
 800128c:	20004b2c 	.word	0x20004b2c

08001290 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001298:	f001 fa6e 	bl	8002778 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800129c:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <prvAddNewTaskToReadyList+0xc4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001354 <prvAddNewTaskToReadyList+0xc4>)
 80012a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80012a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <prvAddNewTaskToReadyList+0xc8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80012ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001358 <prvAddNewTaskToReadyList+0xc8>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80012b4:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <prvAddNewTaskToReadyList+0xc4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d110      	bne.n	80012de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80012bc:	f000 fc2e 	bl	8001b1c <prvInitialiseTaskLists>
 80012c0:	e00d      	b.n	80012de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80012c2:	4b26      	ldr	r3, [pc, #152]	@ (800135c <prvAddNewTaskToReadyList+0xcc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80012ca:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <prvAddNewTaskToReadyList+0xc8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d802      	bhi.n	80012de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80012d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001358 <prvAddNewTaskToReadyList+0xc8>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80012de:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <prvAddNewTaskToReadyList+0xd0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001360 <prvAddNewTaskToReadyList+0xd0>)
 80012e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <prvAddNewTaskToReadyList+0xd0>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <prvAddNewTaskToReadyList+0xd4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d903      	bls.n	8001304 <prvAddNewTaskToReadyList+0x74>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001300:	4a18      	ldr	r2, [pc, #96]	@ (8001364 <prvAddNewTaskToReadyList+0xd4>)
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4a15      	ldr	r2, [pc, #84]	@ (8001368 <prvAddNewTaskToReadyList+0xd8>)
 8001312:	441a      	add	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3304      	adds	r3, #4
 8001318:	4619      	mov	r1, r3
 800131a:	4610      	mov	r0, r2
 800131c:	f7ff f8e9 	bl	80004f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001320:	f001 fa5c 	bl	80027dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <prvAddNewTaskToReadyList+0xcc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00e      	beq.n	800134a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800132c:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <prvAddNewTaskToReadyList+0xc8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001336:	429a      	cmp	r2, r3
 8001338:	d207      	bcs.n	800134a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <prvAddNewTaskToReadyList+0xdc>)
 800133c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	f3bf 8f4f 	dsb	sy
 8001346:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000cdc 	.word	0x20000cdc
 8001358:	20000808 	.word	0x20000808
 800135c:	20000ce8 	.word	0x20000ce8
 8001360:	20000cf8 	.word	0x20000cf8
 8001364:	20000ce4 	.word	0x20000ce4
 8001368:	2000080c 	.word	0x2000080c
 800136c:	e000ed04 	.word	0xe000ed04

08001370 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d018      	beq.n	80013b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001382:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <vTaskDelay+0x64>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <vTaskDelay+0x32>
	__asm volatile
 800138a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800138e:	f383 8811 	msr	BASEPRI, r3
 8001392:	f3bf 8f6f 	isb	sy
 8001396:	f3bf 8f4f 	dsb	sy
 800139a:	60bb      	str	r3, [r7, #8]
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	e7fd      	b.n	800139e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80013a2:	f000 f88b 	bl	80014bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80013a6:	2100      	movs	r1, #0
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fd09 	bl	8001dc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80013ae:	f000 f893 	bl	80014d8 <xTaskResumeAll>
 80013b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d107      	bne.n	80013ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80013ba:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <vTaskDelay+0x68>)
 80013bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	f3bf 8f4f 	dsb	sy
 80013c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000d04 	.word	0x20000d04
 80013d8:	e000ed04 	.word	0xe000ed04

080013dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80013ea:	463a      	mov	r2, r7
 80013ec:	1d39      	adds	r1, r7, #4
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f81c 	bl	8000430 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80013f8:	6839      	ldr	r1, [r7, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	9202      	str	r2, [sp, #8]
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2300      	movs	r3, #0
 8001408:	460a      	mov	r2, r1
 800140a:	4924      	ldr	r1, [pc, #144]	@ (800149c <vTaskStartScheduler+0xc0>)
 800140c:	4824      	ldr	r0, [pc, #144]	@ (80014a0 <vTaskStartScheduler+0xc4>)
 800140e:	f7ff fdf1 	bl	8000ff4 <xTaskCreateStatic>
 8001412:	4603      	mov	r3, r0
 8001414:	4a23      	ldr	r2, [pc, #140]	@ (80014a4 <vTaskStartScheduler+0xc8>)
 8001416:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <vTaskStartScheduler+0xc8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001420:	2301      	movs	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e001      	b.n	800142a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d102      	bne.n	8001436 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001430:	f000 fd1a 	bl	8001e68 <xTimerCreateTimerTask>
 8001434:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d11b      	bne.n	8001474 <vTaskStartScheduler+0x98>
	__asm volatile
 800143c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001440:	f383 8811 	msr	BASEPRI, r3
 8001444:	f3bf 8f6f 	isb	sy
 8001448:	f3bf 8f4f 	dsb	sy
 800144c:	613b      	str	r3, [r7, #16]
}
 800144e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <vTaskStartScheduler+0xcc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3354      	adds	r3, #84	@ 0x54
 8001456:	4a15      	ldr	r2, [pc, #84]	@ (80014ac <vTaskStartScheduler+0xd0>)
 8001458:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <vTaskStartScheduler+0xd4>)
 800145c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001460:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <vTaskStartScheduler+0xd8>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001468:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <vTaskStartScheduler+0xdc>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800146e:	f001 f8df 	bl	8002630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001472:	e00f      	b.n	8001494 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800147a:	d10b      	bne.n	8001494 <vTaskStartScheduler+0xb8>
	__asm volatile
 800147c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001480:	f383 8811 	msr	BASEPRI, r3
 8001484:	f3bf 8f6f 	isb	sy
 8001488:	f3bf 8f4f 	dsb	sy
 800148c:	60fb      	str	r3, [r7, #12]
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <vTaskStartScheduler+0xb4>
}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	080031f8 	.word	0x080031f8
 80014a0:	08001aed 	.word	0x08001aed
 80014a4:	20000d00 	.word	0x20000d00
 80014a8:	20000808 	.word	0x20000808
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000cfc 	.word	0x20000cfc
 80014b4:	20000ce8 	.word	0x20000ce8
 80014b8:	20000ce0 	.word	0x20000ce0

080014bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80014c0:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <vTaskSuspendAll+0x18>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a03      	ldr	r2, [pc, #12]	@ (80014d4 <vTaskSuspendAll+0x18>)
 80014c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	20000d04 	.word	0x20000d04

080014d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80014e6:	4b42      	ldr	r3, [pc, #264]	@ (80015f0 <xTaskResumeAll+0x118>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10b      	bne.n	8001506 <xTaskResumeAll+0x2e>
	__asm volatile
 80014ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014f2:	f383 8811 	msr	BASEPRI, r3
 80014f6:	f3bf 8f6f 	isb	sy
 80014fa:	f3bf 8f4f 	dsb	sy
 80014fe:	603b      	str	r3, [r7, #0]
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	e7fd      	b.n	8001502 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001506:	f001 f937 	bl	8002778 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800150a:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <xTaskResumeAll+0x118>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3b01      	subs	r3, #1
 8001510:	4a37      	ldr	r2, [pc, #220]	@ (80015f0 <xTaskResumeAll+0x118>)
 8001512:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001514:	4b36      	ldr	r3, [pc, #216]	@ (80015f0 <xTaskResumeAll+0x118>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d162      	bne.n	80015e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800151c:	4b35      	ldr	r3, [pc, #212]	@ (80015f4 <xTaskResumeAll+0x11c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d05e      	beq.n	80015e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001524:	e02f      	b.n	8001586 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001526:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <xTaskResumeAll+0x120>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3318      	adds	r3, #24
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f83a 	bl	80005ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3304      	adds	r3, #4
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f835 	bl	80005ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001546:	4b2d      	ldr	r3, [pc, #180]	@ (80015fc <xTaskResumeAll+0x124>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d903      	bls.n	8001556 <xTaskResumeAll+0x7e>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001552:	4a2a      	ldr	r2, [pc, #168]	@ (80015fc <xTaskResumeAll+0x124>)
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4a27      	ldr	r2, [pc, #156]	@ (8001600 <xTaskResumeAll+0x128>)
 8001564:	441a      	add	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3304      	adds	r3, #4
 800156a:	4619      	mov	r1, r3
 800156c:	4610      	mov	r0, r2
 800156e:	f7fe ffc0 	bl	80004f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001576:	4b23      	ldr	r3, [pc, #140]	@ (8001604 <xTaskResumeAll+0x12c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157c:	429a      	cmp	r2, r3
 800157e:	d302      	bcc.n	8001586 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8001580:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <xTaskResumeAll+0x130>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <xTaskResumeAll+0x120>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1cb      	bne.n	8001526 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001594:	f000 fb66 	bl	8001c64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001598:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <xTaskResumeAll+0x134>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d010      	beq.n	80015c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80015a4:	f000 f846 	bl	8001634 <xTaskIncrementTick>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <xTaskResumeAll+0x130>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f1      	bne.n	80015a4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <xTaskResumeAll+0x134>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <xTaskResumeAll+0x130>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80015ce:	2301      	movs	r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80015d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <xTaskResumeAll+0x138>)
 80015d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	f3bf 8f4f 	dsb	sy
 80015de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80015e2:	f001 f8fb 	bl	80027dc <vPortExitCritical>

	return xAlreadyYielded;
 80015e6:	68bb      	ldr	r3, [r7, #8]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000d04 	.word	0x20000d04
 80015f4:	20000cdc 	.word	0x20000cdc
 80015f8:	20000c9c 	.word	0x20000c9c
 80015fc:	20000ce4 	.word	0x20000ce4
 8001600:	2000080c 	.word	0x2000080c
 8001604:	20000808 	.word	0x20000808
 8001608:	20000cf0 	.word	0x20000cf0
 800160c:	20000cec 	.word	0x20000cec
 8001610:	e000ed04 	.word	0xe000ed04

08001614 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800161a:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <xTaskGetTickCount+0x1c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000ce0 	.word	0x20000ce0

08001634 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800163e:	4b4f      	ldr	r3, [pc, #316]	@ (800177c <xTaskIncrementTick+0x148>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 8090 	bne.w	8001768 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001648:	4b4d      	ldr	r3, [pc, #308]	@ (8001780 <xTaskIncrementTick+0x14c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001650:	4a4b      	ldr	r2, [pc, #300]	@ (8001780 <xTaskIncrementTick+0x14c>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d121      	bne.n	80016a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800165c:	4b49      	ldr	r3, [pc, #292]	@ (8001784 <xTaskIncrementTick+0x150>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00b      	beq.n	800167e <xTaskIncrementTick+0x4a>
	__asm volatile
 8001666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800166a:	f383 8811 	msr	BASEPRI, r3
 800166e:	f3bf 8f6f 	isb	sy
 8001672:	f3bf 8f4f 	dsb	sy
 8001676:	603b      	str	r3, [r7, #0]
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	e7fd      	b.n	800167a <xTaskIncrementTick+0x46>
 800167e:	4b41      	ldr	r3, [pc, #260]	@ (8001784 <xTaskIncrementTick+0x150>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4b40      	ldr	r3, [pc, #256]	@ (8001788 <xTaskIncrementTick+0x154>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a3e      	ldr	r2, [pc, #248]	@ (8001784 <xTaskIncrementTick+0x150>)
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4a3e      	ldr	r2, [pc, #248]	@ (8001788 <xTaskIncrementTick+0x154>)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b3e      	ldr	r3, [pc, #248]	@ (800178c <xTaskIncrementTick+0x158>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a3c      	ldr	r2, [pc, #240]	@ (800178c <xTaskIncrementTick+0x158>)
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	f000 fae2 	bl	8001c64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80016a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001790 <xTaskIncrementTick+0x15c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d349      	bcc.n	800173e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016aa:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <xTaskIncrementTick+0x150>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d104      	bne.n	80016be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016b4:	4b36      	ldr	r3, [pc, #216]	@ (8001790 <xTaskIncrementTick+0x15c>)
 80016b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016ba:	601a      	str	r2, [r3, #0]
					break;
 80016bc:	e03f      	b.n	800173e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016be:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <xTaskIncrementTick+0x150>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d203      	bcs.n	80016de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80016d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001790 <xTaskIncrementTick+0x15c>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80016dc:	e02f      	b.n	800173e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	3304      	adds	r3, #4
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff62 	bl	80005ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3318      	adds	r3, #24
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff59 	bl	80005ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016fe:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <xTaskIncrementTick+0x160>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d903      	bls.n	800170e <xTaskIncrementTick+0xda>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170a:	4a22      	ldr	r2, [pc, #136]	@ (8001794 <xTaskIncrementTick+0x160>)
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4a1f      	ldr	r2, [pc, #124]	@ (8001798 <xTaskIncrementTick+0x164>)
 800171c:	441a      	add	r2, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3304      	adds	r3, #4
 8001722:	4619      	mov	r1, r3
 8001724:	4610      	mov	r0, r2
 8001726:	f7fe fee4 	bl	80004f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800172e:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <xTaskIncrementTick+0x168>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001734:	429a      	cmp	r2, r3
 8001736:	d3b8      	bcc.n	80016aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001738:	2301      	movs	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800173c:	e7b5      	b.n	80016aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800173e:	4b17      	ldr	r3, [pc, #92]	@ (800179c <xTaskIncrementTick+0x168>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001744:	4914      	ldr	r1, [pc, #80]	@ (8001798 <xTaskIncrementTick+0x164>)
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d901      	bls.n	800175a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8001756:	2301      	movs	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <xTaskIncrementTick+0x16c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8001762:	2301      	movs	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e004      	b.n	8001772 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001768:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <xTaskIncrementTick+0x170>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <xTaskIncrementTick+0x170>)
 8001770:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001772:	697b      	ldr	r3, [r7, #20]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000d04 	.word	0x20000d04
 8001780:	20000ce0 	.word	0x20000ce0
 8001784:	20000c94 	.word	0x20000c94
 8001788:	20000c98 	.word	0x20000c98
 800178c:	20000cf4 	.word	0x20000cf4
 8001790:	20000cfc 	.word	0x20000cfc
 8001794:	20000ce4 	.word	0x20000ce4
 8001798:	2000080c 	.word	0x2000080c
 800179c:	20000808 	.word	0x20000808
 80017a0:	20000cf0 	.word	0x20000cf0
 80017a4:	20000cec 	.word	0x20000cec

080017a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017ae:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <vTaskSwitchContext+0xb4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80017b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <vTaskSwitchContext+0xb8>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80017bc:	e047      	b.n	800184e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80017be:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <vTaskSwitchContext+0xb8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017c4:	4b27      	ldr	r3, [pc, #156]	@ (8001864 <vTaskSwitchContext+0xbc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e011      	b.n	80017f0 <vTaskSwitchContext+0x48>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10b      	bne.n	80017ea <vTaskSwitchContext+0x42>
	__asm volatile
 80017d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017d6:	f383 8811 	msr	BASEPRI, r3
 80017da:	f3bf 8f6f 	isb	sy
 80017de:	f3bf 8f4f 	dsb	sy
 80017e2:	607b      	str	r3, [r7, #4]
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	e7fd      	b.n	80017e6 <vTaskSwitchContext+0x3e>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	491d      	ldr	r1, [pc, #116]	@ (8001868 <vTaskSwitchContext+0xc0>)
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0e3      	beq.n	80017cc <vTaskSwitchContext+0x24>
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4a16      	ldr	r2, [pc, #88]	@ (8001868 <vTaskSwitchContext+0xc0>)
 8001810:	4413      	add	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	3308      	adds	r3, #8
 8001826:	429a      	cmp	r2, r3
 8001828:	d104      	bne.n	8001834 <vTaskSwitchContext+0x8c>
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	4a0c      	ldr	r2, [pc, #48]	@ (800186c <vTaskSwitchContext+0xc4>)
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4a09      	ldr	r2, [pc, #36]	@ (8001864 <vTaskSwitchContext+0xbc>)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <vTaskSwitchContext+0xc4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3354      	adds	r3, #84	@ 0x54
 800184a:	4a09      	ldr	r2, [pc, #36]	@ (8001870 <vTaskSwitchContext+0xc8>)
 800184c:	6013      	str	r3, [r2, #0]
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000d04 	.word	0x20000d04
 8001860:	20000cf0 	.word	0x20000cf0
 8001864:	20000ce4 	.word	0x20000ce4
 8001868:	2000080c 	.word	0x2000080c
 800186c:	20000808 	.word	0x20000808
 8001870:	20000008 	.word	0x20000008

08001874 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10b      	bne.n	800189c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8001884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001888:	f383 8811 	msr	BASEPRI, r3
 800188c:	f3bf 8f6f 	isb	sy
 8001890:	f3bf 8f4f 	dsb	sy
 8001894:	60fb      	str	r3, [r7, #12]
}
 8001896:	bf00      	nop
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800189c:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <vTaskPlaceOnEventList+0x48>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3318      	adds	r3, #24
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7fe fe48 	bl	800053a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018aa:	2101      	movs	r1, #1
 80018ac:	6838      	ldr	r0, [r7, #0]
 80018ae:	f000 fa87 	bl	8001dc0 <prvAddCurrentTaskToDelayedList>
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000808 	.word	0x20000808

080018c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10b      	bne.n	80018ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80018d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018d6:	f383 8811 	msr	BASEPRI, r3
 80018da:	f3bf 8f6f 	isb	sy
 80018de:	f3bf 8f4f 	dsb	sy
 80018e2:	617b      	str	r3, [r7, #20]
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	e7fd      	b.n	80018e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <vTaskPlaceOnEventListRestricted+0x54>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	3318      	adds	r3, #24
 80018f0:	4619      	mov	r1, r3
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7fe fdfd 	bl	80004f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001902:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	68b8      	ldr	r0, [r7, #8]
 8001908:	f000 fa5a 	bl	8001dc0 <prvAddCurrentTaskToDelayedList>
	}
 800190c:	bf00      	nop
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000808 	.word	0x20000808

08001918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10b      	bne.n	8001946 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800192e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001932:	f383 8811 	msr	BASEPRI, r3
 8001936:	f3bf 8f6f 	isb	sy
 800193a:	f3bf 8f4f 	dsb	sy
 800193e:	60fb      	str	r3, [r7, #12]
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	e7fd      	b.n	8001942 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	3318      	adds	r3, #24
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fe2e 	bl	80005ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001950:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <xTaskRemoveFromEventList+0xb0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d11d      	bne.n	8001994 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	3304      	adds	r3, #4
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fe25 	bl	80005ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001966:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <xTaskRemoveFromEventList+0xb4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d903      	bls.n	8001976 <xTaskRemoveFromEventList+0x5e>
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001972:	4a16      	ldr	r2, [pc, #88]	@ (80019cc <xTaskRemoveFromEventList+0xb4>)
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4a13      	ldr	r2, [pc, #76]	@ (80019d0 <xTaskRemoveFromEventList+0xb8>)
 8001984:	441a      	add	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	3304      	adds	r3, #4
 800198a:	4619      	mov	r1, r3
 800198c:	4610      	mov	r0, r2
 800198e:	f7fe fdb0 	bl	80004f2 <vListInsertEnd>
 8001992:	e005      	b.n	80019a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	3318      	adds	r3, #24
 8001998:	4619      	mov	r1, r3
 800199a:	480e      	ldr	r0, [pc, #56]	@ (80019d4 <xTaskRemoveFromEventList+0xbc>)
 800199c:	f7fe fda9 	bl	80004f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <xTaskRemoveFromEventList+0xc0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d905      	bls.n	80019ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80019ae:	2301      	movs	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80019b2:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <xTaskRemoveFromEventList+0xc4>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e001      	b.n	80019be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80019be:	697b      	ldr	r3, [r7, #20]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000d04 	.word	0x20000d04
 80019cc:	20000ce4 	.word	0x20000ce4
 80019d0:	2000080c 	.word	0x2000080c
 80019d4:	20000c9c 	.word	0x20000c9c
 80019d8:	20000808 	.word	0x20000808
 80019dc:	20000cf0 	.word	0x20000cf0

080019e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <vTaskInternalSetTimeOutState+0x24>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <vTaskInternalSetTimeOutState+0x28>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	605a      	str	r2, [r3, #4]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	20000cf4 	.word	0x20000cf4
 8001a08:	20000ce0 	.word	0x20000ce0

08001a0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8001a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a20:	f383 8811 	msr	BASEPRI, r3
 8001a24:	f3bf 8f6f 	isb	sy
 8001a28:	f3bf 8f4f 	dsb	sy
 8001a2c:	613b      	str	r3, [r7, #16]
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10b      	bne.n	8001a52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8001a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a3e:	f383 8811 	msr	BASEPRI, r3
 8001a42:	f3bf 8f6f 	isb	sy
 8001a46:	f3bf 8f4f 	dsb	sy
 8001a4a:	60fb      	str	r3, [r7, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	e7fd      	b.n	8001a4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8001a52:	f000 fe91 	bl	8002778 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001a56:	4b1d      	ldr	r3, [pc, #116]	@ (8001acc <xTaskCheckForTimeOut+0xc0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a6e:	d102      	bne.n	8001a76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	e023      	b.n	8001abe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <xTaskCheckForTimeOut+0xc4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d007      	beq.n	8001a92 <xTaskCheckForTimeOut+0x86>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d302      	bcc.n	8001a92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	e015      	b.n	8001abe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d20b      	bcs.n	8001ab4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	1ad2      	subs	r2, r2, r3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff99 	bl	80019e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	e004      	b.n	8001abe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001aba:	2301      	movs	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001abe:	f000 fe8d 	bl	80027dc <vPortExitCritical>

	return xReturn;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000ce0 	.word	0x20000ce0
 8001ad0:	20000cf4 	.word	0x20000cf4

08001ad4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	@ (8001ae8 <vTaskMissedYield+0x14>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	20000cf0 	.word	0x20000cf0

08001aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001af4:	f000 f852 	bl	8001b9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <prvIdleTask+0x28>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d9f9      	bls.n	8001af4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <prvIdleTask+0x2c>)
 8001b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f3bf 8f4f 	dsb	sy
 8001b0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001b10:	e7f0      	b.n	8001af4 <prvIdleTask+0x8>
 8001b12:	bf00      	nop
 8001b14:	2000080c 	.word	0x2000080c
 8001b18:	e000ed04 	.word	0xe000ed04

08001b1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	e00c      	b.n	8001b42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4a12      	ldr	r2, [pc, #72]	@ (8001b7c <prvInitialiseTaskLists+0x60>)
 8001b34:	4413      	add	r3, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fcae 	bl	8000498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b37      	cmp	r3, #55	@ 0x37
 8001b46:	d9ef      	bls.n	8001b28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001b48:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <prvInitialiseTaskLists+0x64>)
 8001b4a:	f7fe fca5 	bl	8000498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <prvInitialiseTaskLists+0x68>)
 8001b50:	f7fe fca2 	bl	8000498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001b54:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <prvInitialiseTaskLists+0x6c>)
 8001b56:	f7fe fc9f 	bl	8000498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001b5a:	480c      	ldr	r0, [pc, #48]	@ (8001b8c <prvInitialiseTaskLists+0x70>)
 8001b5c:	f7fe fc9c 	bl	8000498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001b60:	480b      	ldr	r0, [pc, #44]	@ (8001b90 <prvInitialiseTaskLists+0x74>)
 8001b62:	f7fe fc99 	bl	8000498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <prvInitialiseTaskLists+0x78>)
 8001b68:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <prvInitialiseTaskLists+0x64>)
 8001b6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <prvInitialiseTaskLists+0x7c>)
 8001b6e:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <prvInitialiseTaskLists+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000080c 	.word	0x2000080c
 8001b80:	20000c6c 	.word	0x20000c6c
 8001b84:	20000c80 	.word	0x20000c80
 8001b88:	20000c9c 	.word	0x20000c9c
 8001b8c:	20000cb0 	.word	0x20000cb0
 8001b90:	20000cc8 	.word	0x20000cc8
 8001b94:	20000c94 	.word	0x20000c94
 8001b98:	20000c98 	.word	0x20000c98

08001b9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ba2:	e019      	b.n	8001bd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001ba4:	f000 fde8 	bl	8002778 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ba8:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <prvCheckTasksWaitingTermination+0x50>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fcf9 	bl	80005ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <prvCheckTasksWaitingTermination+0x54>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf0 <prvCheckTasksWaitingTermination+0x54>)
 8001bc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <prvCheckTasksWaitingTermination+0x58>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <prvCheckTasksWaitingTermination+0x58>)
 8001bcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001bce:	f000 fe05 	bl	80027dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f810 	bl	8001bf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <prvCheckTasksWaitingTermination+0x58>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e1      	bne.n	8001ba4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000cb0 	.word	0x20000cb0
 8001bf0:	20000cdc 	.word	0x20000cdc
 8001bf4:	20000cc4 	.word	0x20000cc4

08001bf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3354      	adds	r3, #84	@ 0x54
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 fa0b 	bl	8003020 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d108      	bne.n	8001c26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 ff9d 	bl	8002b58 <vPortFree>
				vPortFree( pxTCB );
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 ff9a 	bl	8002b58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001c24:	e019      	b.n	8001c5a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d103      	bne.n	8001c38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 ff91 	bl	8002b58 <vPortFree>
	}
 8001c36:	e010      	b.n	8001c5a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d00b      	beq.n	8001c5a <prvDeleteTCB+0x62>
	__asm volatile
 8001c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c46:	f383 8811 	msr	BASEPRI, r3
 8001c4a:	f3bf 8f6f 	isb	sy
 8001c4e:	f3bf 8f4f 	dsb	sy
 8001c52:	60fb      	str	r3, [r7, #12]
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	e7fd      	b.n	8001c56 <prvDeleteTCB+0x5e>
	}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <prvResetNextTaskUnblockTime+0x38>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d104      	bne.n	8001c7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <prvResetNextTaskUnblockTime+0x3c>)
 8001c76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001c7c:	e008      	b.n	8001c90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <prvResetNextTaskUnblockTime+0x38>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <prvResetNextTaskUnblockTime+0x3c>)
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	20000c94 	.word	0x20000c94
 8001ca0:	20000cfc 	.word	0x20000cfc

08001ca4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001caa:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <xTaskGetSchedulerState+0x34>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	e008      	b.n	8001cca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <xTaskGetSchedulerState+0x38>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	e001      	b.n	8001cca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001cca:	687b      	ldr	r3, [r7, #4]
	}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	20000ce8 	.word	0x20000ce8
 8001cdc:	20000d04 	.word	0x20000d04

08001ce0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d058      	beq.n	8001da8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8001db4 <xTaskPriorityDisinherit+0xd4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d00b      	beq.n	8001d18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8001d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d04:	f383 8811 	msr	BASEPRI, r3
 8001d08:	f3bf 8f6f 	isb	sy
 8001d0c:	f3bf 8f4f 	dsb	sy
 8001d10:	60fb      	str	r3, [r7, #12]
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10b      	bne.n	8001d38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8001d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d24:	f383 8811 	msr	BASEPRI, r3
 8001d28:	f3bf 8f6f 	isb	sy
 8001d2c:	f3bf 8f4f 	dsb	sy
 8001d30:	60bb      	str	r3, [r7, #8]
}
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d3c:	1e5a      	subs	r2, r3, #1
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d02c      	beq.n	8001da8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d128      	bne.n	8001da8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fc26 	bl	80005ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <xTaskPriorityDisinherit+0xd8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d903      	bls.n	8001d88 <xTaskPriorityDisinherit+0xa8>
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d84:	4a0c      	ldr	r2, [pc, #48]	@ (8001db8 <xTaskPriorityDisinherit+0xd8>)
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4a09      	ldr	r2, [pc, #36]	@ (8001dbc <xTaskPriorityDisinherit+0xdc>)
 8001d96:	441a      	add	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f7fe fba7 	bl	80004f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001da8:	697b      	ldr	r3, [r7, #20]
	}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000808 	.word	0x20000808
 8001db8:	20000ce4 	.word	0x20000ce4
 8001dbc:	2000080c 	.word	0x2000080c

08001dc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001dca:	4b21      	ldr	r3, [pc, #132]	@ (8001e50 <prvAddCurrentTaskToDelayedList+0x90>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dd0:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fbe8 	bl	80005ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001de2:	d10a      	bne.n	8001dfa <prvAddCurrentTaskToDelayedList+0x3a>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dea:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3304      	adds	r3, #4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4819      	ldr	r0, [pc, #100]	@ (8001e58 <prvAddCurrentTaskToDelayedList+0x98>)
 8001df4:	f7fe fb7d 	bl	80004f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001df8:	e026      	b.n	8001e48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001e02:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d209      	bcs.n	8001e26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e12:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f7fe fb8b 	bl	800053a <vListInsert>
}
 8001e24:	e010      	b.n	8001e48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f7fe fb81 	bl	800053a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d202      	bcs.n	8001e48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8001e42:	4a08      	ldr	r2, [pc, #32]	@ (8001e64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000ce0 	.word	0x20000ce0
 8001e54:	20000808 	.word	0x20000808
 8001e58:	20000cc8 	.word	0x20000cc8
 8001e5c:	20000c98 	.word	0x20000c98
 8001e60:	20000c94 	.word	0x20000c94
 8001e64:	20000cfc 	.word	0x20000cfc

08001e68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	@ 0x28
 8001e6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001e72:	f000 fb13 	bl	800249c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001e76:	4b1d      	ldr	r3, [pc, #116]	@ (8001eec <xTimerCreateTimerTask+0x84>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d021      	beq.n	8001ec2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8001e86:	1d3a      	adds	r2, r7, #4
 8001e88:	f107 0108 	add.w	r1, r7, #8
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fae7 	bl	8000464 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	9202      	str	r2, [sp, #8]
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	460a      	mov	r2, r1
 8001ea8:	4911      	ldr	r1, [pc, #68]	@ (8001ef0 <xTimerCreateTimerTask+0x88>)
 8001eaa:	4812      	ldr	r0, [pc, #72]	@ (8001ef4 <xTimerCreateTimerTask+0x8c>)
 8001eac:	f7ff f8a2 	bl	8000ff4 <xTaskCreateStatic>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4a11      	ldr	r2, [pc, #68]	@ (8001ef8 <xTimerCreateTimerTask+0x90>)
 8001eb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <xTimerCreateTimerTask+0x90>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10b      	bne.n	8001ee0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8001ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ecc:	f383 8811 	msr	BASEPRI, r3
 8001ed0:	f3bf 8f6f 	isb	sy
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	613b      	str	r3, [r7, #16]
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8001ee0:	697b      	ldr	r3, [r7, #20]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000d38 	.word	0x20000d38
 8001ef0:	08003200 	.word	0x08003200
 8001ef4:	08002035 	.word	0x08002035
 8001ef8:	20000d3c 	.word	0x20000d3c

08001efc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	@ 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10b      	bne.n	8001f2c <xTimerGenericCommand+0x30>
	__asm volatile
 8001f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f18:	f383 8811 	msr	BASEPRI, r3
 8001f1c:	f3bf 8f6f 	isb	sy
 8001f20:	f3bf 8f4f 	dsb	sy
 8001f24:	623b      	str	r3, [r7, #32]
}
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001f2c:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <xTimerGenericCommand+0x98>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d02a      	beq.n	8001f8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	dc18      	bgt.n	8001f78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001f46:	f7ff fead 	bl	8001ca4 <xTaskGetSchedulerState>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d109      	bne.n	8001f64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001f50:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <xTimerGenericCommand+0x98>)
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	f107 0110 	add.w	r1, r7, #16
 8001f58:	2300      	movs	r3, #0
 8001f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f5c:	f7fe fc5a 	bl	8000814 <xQueueGenericSend>
 8001f60:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f62:	e012      	b.n	8001f8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <xTimerGenericCommand+0x98>)
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	f107 0110 	add.w	r1, r7, #16
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f7fe fc50 	bl	8000814 <xQueueGenericSend>
 8001f74:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f76:	e008      	b.n	8001f8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <xTimerGenericCommand+0x98>)
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	f107 0110 	add.w	r1, r7, #16
 8001f80:	2300      	movs	r3, #0
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	f7fe fd48 	bl	8000a18 <xQueueGenericSendFromISR>
 8001f88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3728      	adds	r7, #40	@ 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000d38 	.word	0x20000d38

08001f98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fa2:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <prvProcessExpiredTimer+0x98>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fafb 	bl	80005ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d023      	beq.n	800200c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	18d1      	adds	r1, r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	6978      	ldr	r0, [r7, #20]
 8001fd2:	f000 f8d5 	bl	8002180 <prvInsertTimerInActiveList>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d020      	beq.n	800201e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001fdc:	2300      	movs	r3, #0
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff88 	bl	8001efc <xTimerGenericCommand>
 8001fec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d114      	bne.n	800201e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8001ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ff8:	f383 8811 	msr	BASEPRI, r3
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f3bf 8f4f 	dsb	sy
 8002004:	60fb      	str	r3, [r7, #12]
}
 8002006:	bf00      	nop
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	b2da      	uxtb	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	4798      	blx	r3
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000d30 	.word	0x20000d30

08002034 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	4618      	mov	r0, r3
 8002042:	f000 f859 	bl	80020f8 <prvGetNextExpireTime>
 8002046:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4619      	mov	r1, r3
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f805 	bl	800205c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002052:	f000 f8d7 	bl	8002204 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002056:	bf00      	nop
 8002058:	e7f0      	b.n	800203c <prvTimerTask+0x8>
	...

0800205c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002066:	f7ff fa29 	bl	80014bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f866 	bl	8002140 <prvSampleTimeNow>
 8002074:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d130      	bne.n	80020de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10a      	bne.n	8002098 <prvProcessTimerOrBlockTask+0x3c>
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	429a      	cmp	r2, r3
 8002088:	d806      	bhi.n	8002098 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800208a:	f7ff fa25 	bl	80014d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800208e:	68f9      	ldr	r1, [r7, #12]
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff81 	bl	8001f98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002096:	e024      	b.n	80020e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d008      	beq.n	80020b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800209e:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <prvProcessTimerOrBlockTask+0x90>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <prvProcessTimerOrBlockTask+0x50>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <prvProcessTimerOrBlockTask+0x52>
 80020ac:	2300      	movs	r3, #0
 80020ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80020b0:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <prvProcessTimerOrBlockTask+0x94>)
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe ff65 	bl	8000f8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80020c2:	f7ff fa09 	bl	80014d8 <xTaskResumeAll>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10a      	bne.n	80020e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80020cc:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <prvProcessTimerOrBlockTask+0x98>)
 80020ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	f3bf 8f4f 	dsb	sy
 80020d8:	f3bf 8f6f 	isb	sy
}
 80020dc:	e001      	b.n	80020e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80020de:	f7ff f9fb 	bl	80014d8 <xTaskResumeAll>
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000d34 	.word	0x20000d34
 80020f0:	20000d38 	.word	0x20000d38
 80020f4:	e000ed04 	.word	0xe000ed04

080020f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002100:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <prvGetNextExpireTime+0x44>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <prvGetNextExpireTime+0x16>
 800210a:	2201      	movs	r2, #1
 800210c:	e000      	b.n	8002110 <prvGetNextExpireTime+0x18>
 800210e:	2200      	movs	r2, #0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800211c:	4b07      	ldr	r3, [pc, #28]	@ (800213c <prvGetNextExpireTime+0x44>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	e001      	b.n	800212c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800212c:	68fb      	ldr	r3, [r7, #12]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000d30 	.word	0x20000d30

08002140 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002148:	f7ff fa64 	bl	8001614 <xTaskGetTickCount>
 800214c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800214e:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <prvSampleTimeNow+0x3c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d205      	bcs.n	8002164 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002158:	f000 f93a 	bl	80023d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e002      	b.n	800216a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800216a:	4a04      	ldr	r2, [pc, #16]	@ (800217c <prvSampleTimeNow+0x3c>)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002170:	68fb      	ldr	r3, [r7, #12]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000d40 	.word	0x20000d40

08002180 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d812      	bhi.n	80021cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	1ad2      	subs	r2, r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d302      	bcc.n	80021ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80021b4:	2301      	movs	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	e01b      	b.n	80021f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <prvInsertTimerInActiveList+0x7c>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3304      	adds	r3, #4
 80021c2:	4619      	mov	r1, r3
 80021c4:	4610      	mov	r0, r2
 80021c6:	f7fe f9b8 	bl	800053a <vListInsert>
 80021ca:	e012      	b.n	80021f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d206      	bcs.n	80021e2 <prvInsertTimerInActiveList+0x62>
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d302      	bcc.n	80021e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80021dc:	2301      	movs	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	e007      	b.n	80021f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80021e2:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <prvInsertTimerInActiveList+0x80>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3304      	adds	r3, #4
 80021ea:	4619      	mov	r1, r3
 80021ec:	4610      	mov	r0, r2
 80021ee:	f7fe f9a4 	bl	800053a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80021f2:	697b      	ldr	r3, [r7, #20]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000d34 	.word	0x20000d34
 8002200:	20000d30 	.word	0x20000d30

08002204 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08e      	sub	sp, #56	@ 0x38
 8002208:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800220a:	e0ce      	b.n	80023aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	da19      	bge.n	8002246 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	3304      	adds	r3, #4
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8002218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10b      	bne.n	8002236 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800221e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002222:	f383 8811 	msr	BASEPRI, r3
 8002226:	f3bf 8f6f 	isb	sy
 800222a:	f3bf 8f4f 	dsb	sy
 800222e:	61fb      	str	r3, [r7, #28]
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	e7fd      	b.n	8002232 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800223c:	6850      	ldr	r0, [r2, #4]
 800223e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002240:	6892      	ldr	r2, [r2, #8]
 8002242:	4611      	mov	r1, r2
 8002244:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f2c0 80ae 	blt.w	80023aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800225a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225c:	3304      	adds	r3, #4
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe f9a4 	bl	80005ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002264:	463b      	mov	r3, r7
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff6a 	bl	8002140 <prvSampleTimeNow>
 800226c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b09      	cmp	r3, #9
 8002272:	f200 8097 	bhi.w	80023a4 <prvProcessReceivedCommands+0x1a0>
 8002276:	a201      	add	r2, pc, #4	@ (adr r2, 800227c <prvProcessReceivedCommands+0x78>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	080022a5 	.word	0x080022a5
 8002280:	080022a5 	.word	0x080022a5
 8002284:	080022a5 	.word	0x080022a5
 8002288:	0800231b 	.word	0x0800231b
 800228c:	0800232f 	.word	0x0800232f
 8002290:	0800237b 	.word	0x0800237b
 8002294:	080022a5 	.word	0x080022a5
 8002298:	080022a5 	.word	0x080022a5
 800229c:	0800231b 	.word	0x0800231b
 80022a0:	0800232f 	.word	0x0800232f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80022a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	18d1      	adds	r1, r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022c4:	f7ff ff5c 	bl	8002180 <prvInsertTimerInActiveList>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d06c      	beq.n	80023a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80022d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d061      	beq.n	80023a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	441a      	add	r2, r3
 80022ec:	2300      	movs	r3, #0
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2300      	movs	r3, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022f6:	f7ff fe01 	bl	8001efc <xTimerGenericCommand>
 80022fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d152      	bne.n	80023a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8002302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002306:	f383 8811 	msr	BASEPRI, r3
 800230a:	f3bf 8f6f 	isb	sy
 800230e:	f3bf 8f4f 	dsb	sy
 8002312:	61bb      	str	r3, [r7, #24]
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	e7fd      	b.n	8002316 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800231a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	b2da      	uxtb	r2, r3
 8002326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002328:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800232c:	e03d      	b.n	80023aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800232e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	b2da      	uxtb	r2, r3
 800233a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002344:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800234e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002352:	f383 8811 	msr	BASEPRI, r3
 8002356:	f3bf 8f6f 	isb	sy
 800235a:	f3bf 8f4f 	dsb	sy
 800235e:	617b      	str	r3, [r7, #20]
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	e7fd      	b.n	8002362 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	18d1      	adds	r1, r2, r3
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002374:	f7ff ff04 	bl	8002180 <prvInsertTimerInActiveList>
					break;
 8002378:	e017      	b.n	80023aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800237a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d103      	bne.n	8002390 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8002388:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800238a:	f000 fbe5 	bl	8002b58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800238e:	e00c      	b.n	80023aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002392:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80023a2:	e002      	b.n	80023aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80023a4:	bf00      	nop
 80023a6:	e000      	b.n	80023aa <prvProcessReceivedCommands+0x1a6>
					break;
 80023a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80023aa:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <prvProcessReceivedCommands+0x1c8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	1d39      	adds	r1, r7, #4
 80023b0:	2200      	movs	r2, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fbce 	bl	8000b54 <xQueueReceive>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f47f af26 	bne.w	800220c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3730      	adds	r7, #48	@ 0x30
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000d38 	.word	0x20000d38

080023d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80023d6:	e049      	b.n	800246c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002494 <prvSwitchTimerLists+0xc4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002494 <prvSwitchTimerLists+0xc4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3304      	adds	r3, #4
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe f8db 	bl	80005ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d02f      	beq.n	800246c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	429a      	cmp	r2, r3
 800241c:	d90e      	bls.n	800243c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800242a:	4b1a      	ldr	r3, [pc, #104]	@ (8002494 <prvSwitchTimerLists+0xc4>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3304      	adds	r3, #4
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f7fe f880 	bl	800053a <vListInsert>
 800243a:	e017      	b.n	800246c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800243c:	2300      	movs	r3, #0
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2300      	movs	r3, #0
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	2100      	movs	r1, #0
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff fd58 	bl	8001efc <xTimerGenericCommand>
 800244c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10b      	bne.n	800246c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8002454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002458:	f383 8811 	msr	BASEPRI, r3
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	f3bf 8f4f 	dsb	sy
 8002464:	603b      	str	r3, [r7, #0]
}
 8002466:	bf00      	nop
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800246c:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <prvSwitchTimerLists+0xc4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1b0      	bne.n	80023d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <prvSwitchTimerLists+0xc4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <prvSwitchTimerLists+0xc8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a04      	ldr	r2, [pc, #16]	@ (8002494 <prvSwitchTimerLists+0xc4>)
 8002482:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002484:	4a04      	ldr	r2, [pc, #16]	@ (8002498 <prvSwitchTimerLists+0xc8>)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	6013      	str	r3, [r2, #0]
}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000d30 	.word	0x20000d30
 8002498:	20000d34 	.word	0x20000d34

0800249c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80024a2:	f000 f969 	bl	8002778 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <prvCheckForValidListAndQueue+0x60>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d120      	bne.n	80024f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80024ae:	4814      	ldr	r0, [pc, #80]	@ (8002500 <prvCheckForValidListAndQueue+0x64>)
 80024b0:	f7fd fff2 	bl	8000498 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80024b4:	4813      	ldr	r0, [pc, #76]	@ (8002504 <prvCheckForValidListAndQueue+0x68>)
 80024b6:	f7fd ffef 	bl	8000498 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80024ba:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <prvCheckForValidListAndQueue+0x6c>)
 80024bc:	4a10      	ldr	r2, [pc, #64]	@ (8002500 <prvCheckForValidListAndQueue+0x64>)
 80024be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80024c0:	4b12      	ldr	r3, [pc, #72]	@ (800250c <prvCheckForValidListAndQueue+0x70>)
 80024c2:	4a10      	ldr	r2, [pc, #64]	@ (8002504 <prvCheckForValidListAndQueue+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80024c6:	2300      	movs	r3, #0
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <prvCheckForValidListAndQueue+0x74>)
 80024cc:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <prvCheckForValidListAndQueue+0x78>)
 80024ce:	2110      	movs	r1, #16
 80024d0:	200a      	movs	r0, #10
 80024d2:	f7fe f8ff 	bl	80006d4 <xQueueGenericCreateStatic>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4a08      	ldr	r2, [pc, #32]	@ (80024fc <prvCheckForValidListAndQueue+0x60>)
 80024da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80024dc:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <prvCheckForValidListAndQueue+0x60>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80024e4:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <prvCheckForValidListAndQueue+0x60>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	490b      	ldr	r1, [pc, #44]	@ (8002518 <prvCheckForValidListAndQueue+0x7c>)
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fd24 	bl	8000f38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80024f0:	f000 f974 	bl	80027dc <vPortExitCritical>
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000d38 	.word	0x20000d38
 8002500:	20000d08 	.word	0x20000d08
 8002504:	20000d1c 	.word	0x20000d1c
 8002508:	20000d30 	.word	0x20000d30
 800250c:	20000d34 	.word	0x20000d34
 8002510:	20000de4 	.word	0x20000de4
 8002514:	20000d44 	.word	0x20000d44
 8002518:	08003208 	.word	0x08003208

0800251c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3b04      	subs	r3, #4
 800252c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3b04      	subs	r3, #4
 800253a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f023 0201 	bic.w	r2, r3, #1
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3b04      	subs	r3, #4
 800254a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800254c:	4a0c      	ldr	r2, [pc, #48]	@ (8002580 <pxPortInitialiseStack+0x64>)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	3b14      	subs	r3, #20
 8002556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3b04      	subs	r3, #4
 8002562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f06f 0202 	mvn.w	r2, #2
 800256a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3b20      	subs	r3, #32
 8002570:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002572:	68fb      	ldr	r3, [r7, #12]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	08002585 	.word	0x08002585

08002584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800258e:	4b13      	ldr	r3, [pc, #76]	@ (80025dc <prvTaskExitError+0x58>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002596:	d00b      	beq.n	80025b0 <prvTaskExitError+0x2c>
	__asm volatile
 8002598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	60fb      	str	r3, [r7, #12]
}
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <prvTaskExitError+0x28>
	__asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	60bb      	str	r3, [r7, #8]
}
 80025c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80025c4:	bf00      	nop
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0fc      	beq.n	80025c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000000 	.word	0x20000000

080025e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80025e0:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <pxCurrentTCBConst2>)
 80025e2:	6819      	ldr	r1, [r3, #0]
 80025e4:	6808      	ldr	r0, [r1, #0]
 80025e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ea:	f380 8809 	msr	PSP, r0
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f04f 0000 	mov.w	r0, #0
 80025f6:	f380 8811 	msr	BASEPRI, r0
 80025fa:	4770      	bx	lr
 80025fc:	f3af 8000 	nop.w

08002600 <pxCurrentTCBConst2>:
 8002600:	20000808 	.word	0x20000808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop

08002608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002608:	4808      	ldr	r0, [pc, #32]	@ (800262c <prvPortStartFirstTask+0x24>)
 800260a:	6800      	ldr	r0, [r0, #0]
 800260c:	6800      	ldr	r0, [r0, #0]
 800260e:	f380 8808 	msr	MSP, r0
 8002612:	f04f 0000 	mov.w	r0, #0
 8002616:	f380 8814 	msr	CONTROL, r0
 800261a:	b662      	cpsie	i
 800261c:	b661      	cpsie	f
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	df00      	svc	0
 8002628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800262a:	bf00      	nop
 800262c:	e000ed08 	.word	0xe000ed08

08002630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002636:	4b47      	ldr	r3, [pc, #284]	@ (8002754 <xPortStartScheduler+0x124>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a47      	ldr	r2, [pc, #284]	@ (8002758 <xPortStartScheduler+0x128>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d10b      	bne.n	8002658 <xPortStartScheduler+0x28>
	__asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	613b      	str	r3, [r7, #16]
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002658:	4b3e      	ldr	r3, [pc, #248]	@ (8002754 <xPortStartScheduler+0x124>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a3f      	ldr	r2, [pc, #252]	@ (800275c <xPortStartScheduler+0x12c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10b      	bne.n	800267a <xPortStartScheduler+0x4a>
	__asm volatile
 8002662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	60fb      	str	r3, [r7, #12]
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	e7fd      	b.n	8002676 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800267a:	4b39      	ldr	r3, [pc, #228]	@ (8002760 <xPortStartScheduler+0x130>)
 800267c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	22ff      	movs	r2, #255	@ 0xff
 800268a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b31      	ldr	r3, [pc, #196]	@ (8002764 <xPortStartScheduler+0x134>)
 80026a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026a2:	4b31      	ldr	r3, [pc, #196]	@ (8002768 <xPortStartScheduler+0x138>)
 80026a4:	2207      	movs	r2, #7
 80026a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026a8:	e009      	b.n	80026be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80026aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002768 <xPortStartScheduler+0x138>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002768 <xPortStartScheduler+0x138>)
 80026b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c6:	2b80      	cmp	r3, #128	@ 0x80
 80026c8:	d0ef      	beq.n	80026aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80026ca:	4b27      	ldr	r3, [pc, #156]	@ (8002768 <xPortStartScheduler+0x138>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f1c3 0307 	rsb	r3, r3, #7
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d00b      	beq.n	80026ee <xPortStartScheduler+0xbe>
	__asm volatile
 80026d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026da:	f383 8811 	msr	BASEPRI, r3
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	60bb      	str	r3, [r7, #8]
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	e7fd      	b.n	80026ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80026ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <xPortStartScheduler+0x138>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002768 <xPortStartScheduler+0x138>)
 80026f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <xPortStartScheduler+0x138>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002700:	4a19      	ldr	r2, [pc, #100]	@ (8002768 <xPortStartScheduler+0x138>)
 8002702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800270c:	4b17      	ldr	r3, [pc, #92]	@ (800276c <xPortStartScheduler+0x13c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a16      	ldr	r2, [pc, #88]	@ (800276c <xPortStartScheduler+0x13c>)
 8002712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002718:	4b14      	ldr	r3, [pc, #80]	@ (800276c <xPortStartScheduler+0x13c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a13      	ldr	r2, [pc, #76]	@ (800276c <xPortStartScheduler+0x13c>)
 800271e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002724:	f000 f8da 	bl	80028dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <xPortStartScheduler+0x140>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800272e:	f000 f8f9 	bl	8002924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <xPortStartScheduler+0x144>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a0f      	ldr	r2, [pc, #60]	@ (8002774 <xPortStartScheduler+0x144>)
 8002738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800273c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800273e:	f7ff ff63 	bl	8002608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002742:	f7ff f831 	bl	80017a8 <vTaskSwitchContext>
	prvTaskExitError();
 8002746:	f7ff ff1d 	bl	8002584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	e000ed00 	.word	0xe000ed00
 8002758:	410fc271 	.word	0x410fc271
 800275c:	410fc270 	.word	0x410fc270
 8002760:	e000e400 	.word	0xe000e400
 8002764:	20000e34 	.word	0x20000e34
 8002768:	20000e38 	.word	0x20000e38
 800276c:	e000ed20 	.word	0xe000ed20
 8002770:	20000000 	.word	0x20000000
 8002774:	e000ef34 	.word	0xe000ef34

08002778 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
	__asm volatile
 800277e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	f3bf 8f6f 	isb	sy
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	607b      	str	r3, [r7, #4]
}
 8002790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002792:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <vPortEnterCritical+0x5c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3301      	adds	r3, #1
 8002798:	4a0e      	ldr	r2, [pc, #56]	@ (80027d4 <vPortEnterCritical+0x5c>)
 800279a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800279c:	4b0d      	ldr	r3, [pc, #52]	@ (80027d4 <vPortEnterCritical+0x5c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d110      	bne.n	80027c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80027a4:	4b0c      	ldr	r3, [pc, #48]	@ (80027d8 <vPortEnterCritical+0x60>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	603b      	str	r3, [r7, #0]
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	e7fd      	b.n	80027c2 <vPortEnterCritical+0x4a>
	}
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000000 	.word	0x20000000
 80027d8:	e000ed04 	.word	0xe000ed04

080027dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80027e2:	4b12      	ldr	r3, [pc, #72]	@ (800282c <vPortExitCritical+0x50>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10b      	bne.n	8002802 <vPortExitCritical+0x26>
	__asm volatile
 80027ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	607b      	str	r3, [r7, #4]
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	e7fd      	b.n	80027fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002802:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <vPortExitCritical+0x50>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3b01      	subs	r3, #1
 8002808:	4a08      	ldr	r2, [pc, #32]	@ (800282c <vPortExitCritical+0x50>)
 800280a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800280c:	4b07      	ldr	r3, [pc, #28]	@ (800282c <vPortExitCritical+0x50>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <vPortExitCritical+0x44>
 8002814:	2300      	movs	r3, #0
 8002816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f383 8811 	msr	BASEPRI, r3
}
 800281e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	20000000 	.word	0x20000000

08002830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002830:	f3ef 8009 	mrs	r0, PSP
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <pxCurrentTCBConst>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	f01e 0f10 	tst.w	lr, #16
 8002840:	bf08      	it	eq
 8002842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284a:	6010      	str	r0, [r2, #0]
 800284c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002854:	f380 8811 	msr	BASEPRI, r0
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f7fe ffa2 	bl	80017a8 <vTaskSwitchContext>
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f380 8811 	msr	BASEPRI, r0
 800286c:	bc09      	pop	{r0, r3}
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	6808      	ldr	r0, [r1, #0]
 8002872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002876:	f01e 0f10 	tst.w	lr, #16
 800287a:	bf08      	it	eq
 800287c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002880:	f380 8809 	msr	PSP, r0
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	f3af 8000 	nop.w

08002890 <pxCurrentTCBConst>:
 8002890:	20000808 	.word	0x20000808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop

08002898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
	__asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	607b      	str	r3, [r7, #4]
}
 80028b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80028b2:	f7fe febf 	bl	8001634 <xTaskIncrementTick>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028bc:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <xPortSysTickHandler+0x40>)
 80028be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	2300      	movs	r3, #0
 80028c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f383 8811 	msr	BASEPRI, r3
}
 80028ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	e000ed04 	.word	0xe000ed04

080028dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <vPortSetupTimerInterrupt+0x34>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <vPortSetupTimerInterrupt+0x38>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80028ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <vPortSetupTimerInterrupt+0x3c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0a      	ldr	r2, [pc, #40]	@ (800291c <vPortSetupTimerInterrupt+0x40>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	099b      	lsrs	r3, r3, #6
 80028f8:	4a09      	ldr	r2, [pc, #36]	@ (8002920 <vPortSetupTimerInterrupt+0x44>)
 80028fa:	3b01      	subs	r3, #1
 80028fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80028fe:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <vPortSetupTimerInterrupt+0x34>)
 8002900:	2207      	movs	r2, #7
 8002902:	601a      	str	r2, [r3, #0]
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e010 	.word	0xe000e010
 8002914:	e000e018 	.word	0xe000e018
 8002918:	20000004 	.word	0x20000004
 800291c:	10624dd3 	.word	0x10624dd3
 8002920:	e000e014 	.word	0xe000e014

08002924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002934 <vPortEnableVFP+0x10>
 8002928:	6801      	ldr	r1, [r0, #0]
 800292a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800292e:	6001      	str	r1, [r0, #0]
 8002930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002932:	bf00      	nop
 8002934:	e000ed88 	.word	0xe000ed88

08002938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800293e:	f3ef 8305 	mrs	r3, IPSR
 8002942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	d915      	bls.n	8002976 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800294a:	4a18      	ldr	r2, [pc, #96]	@ (80029ac <vPortValidateInterruptPriority+0x74>)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002954:	4b16      	ldr	r3, [pc, #88]	@ (80029b0 <vPortValidateInterruptPriority+0x78>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	7afa      	ldrb	r2, [r7, #11]
 800295a:	429a      	cmp	r2, r3
 800295c:	d20b      	bcs.n	8002976 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800295e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	607b      	str	r3, [r7, #4]
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	e7fd      	b.n	8002972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002976:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <vPortValidateInterruptPriority+0x7c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800297e:	4b0e      	ldr	r3, [pc, #56]	@ (80029b8 <vPortValidateInterruptPriority+0x80>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d90b      	bls.n	800299e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	603b      	str	r3, [r7, #0]
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	e7fd      	b.n	800299a <vPortValidateInterruptPriority+0x62>
	}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	e000e3f0 	.word	0xe000e3f0
 80029b0:	20000e34 	.word	0x20000e34
 80029b4:	e000ed0c 	.word	0xe000ed0c
 80029b8:	20000e38 	.word	0x20000e38

080029bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	@ 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80029c8:	f7fe fd78 	bl	80014bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80029cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002b40 <pvPortMalloc+0x184>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80029d4:	f000 f924 	bl	8002c20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80029d8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b44 <pvPortMalloc+0x188>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f040 8095 	bne.w	8002b10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01e      	beq.n	8002a2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80029ec:	2208      	movs	r2, #8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d015      	beq.n	8002a2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f023 0307 	bic.w	r3, r3, #7
 8002a04:	3308      	adds	r3, #8
 8002a06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <pvPortMalloc+0x6e>
	__asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	617b      	str	r3, [r7, #20]
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	e7fd      	b.n	8002a26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d06f      	beq.n	8002b10 <pvPortMalloc+0x154>
 8002a30:	4b45      	ldr	r3, [pc, #276]	@ (8002b48 <pvPortMalloc+0x18c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d86a      	bhi.n	8002b10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002a3a:	4b44      	ldr	r3, [pc, #272]	@ (8002b4c <pvPortMalloc+0x190>)
 8002a3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002a3e:	4b43      	ldr	r3, [pc, #268]	@ (8002b4c <pvPortMalloc+0x190>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a44:	e004      	b.n	8002a50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d903      	bls.n	8002a62 <pvPortMalloc+0xa6>
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f1      	bne.n	8002a46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a62:	4b37      	ldr	r3, [pc, #220]	@ (8002b40 <pvPortMalloc+0x184>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d051      	beq.n	8002b10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2208      	movs	r2, #8
 8002a72:	4413      	add	r3, r2
 8002a74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	1ad2      	subs	r2, r2, r3
 8002a86:	2308      	movs	r3, #8
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d920      	bls.n	8002ad0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00b      	beq.n	8002ab8 <pvPortMalloc+0xfc>
	__asm volatile
 8002aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	613b      	str	r3, [r7, #16]
}
 8002ab2:	bf00      	nop
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	1ad2      	subs	r2, r2, r3
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002aca:	69b8      	ldr	r0, [r7, #24]
 8002acc:	f000 f90a 	bl	8002ce4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <pvPortMalloc+0x18c>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	4a1b      	ldr	r2, [pc, #108]	@ (8002b48 <pvPortMalloc+0x18c>)
 8002adc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ade:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <pvPortMalloc+0x18c>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <pvPortMalloc+0x194>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d203      	bcs.n	8002af2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002aea:	4b17      	ldr	r3, [pc, #92]	@ (8002b48 <pvPortMalloc+0x18c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a18      	ldr	r2, [pc, #96]	@ (8002b50 <pvPortMalloc+0x194>)
 8002af0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <pvPortMalloc+0x188>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002b06:	4b13      	ldr	r3, [pc, #76]	@ (8002b54 <pvPortMalloc+0x198>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	4a11      	ldr	r2, [pc, #68]	@ (8002b54 <pvPortMalloc+0x198>)
 8002b0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002b10:	f7fe fce2 	bl	80014d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <pvPortMalloc+0x17a>
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	60fb      	str	r3, [r7, #12]
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	e7fd      	b.n	8002b32 <pvPortMalloc+0x176>
	return pvReturn;
 8002b36:	69fb      	ldr	r3, [r7, #28]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3728      	adds	r7, #40	@ 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20004a44 	.word	0x20004a44
 8002b44:	20004a58 	.word	0x20004a58
 8002b48:	20004a48 	.word	0x20004a48
 8002b4c:	20004a3c 	.word	0x20004a3c
 8002b50:	20004a4c 	.word	0x20004a4c
 8002b54:	20004a50 	.word	0x20004a50

08002b58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d04f      	beq.n	8002c0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	425b      	negs	r3, r3
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4413      	add	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	4b25      	ldr	r3, [pc, #148]	@ (8002c14 <vPortFree+0xbc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10b      	bne.n	8002b9e <vPortFree+0x46>
	__asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	60fb      	str	r3, [r7, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	e7fd      	b.n	8002b9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <vPortFree+0x66>
	__asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	60bb      	str	r3, [r7, #8]
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	e7fd      	b.n	8002bba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	4b14      	ldr	r3, [pc, #80]	@ (8002c14 <vPortFree+0xbc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01e      	beq.n	8002c0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11a      	bne.n	8002c0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <vPortFree+0xbc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	401a      	ands	r2, r3
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002be4:	f7fe fc6a 	bl	80014bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <vPortFree+0xc0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4a09      	ldr	r2, [pc, #36]	@ (8002c18 <vPortFree+0xc0>)
 8002bf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002bf6:	6938      	ldr	r0, [r7, #16]
 8002bf8:	f000 f874 	bl	8002ce4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002bfc:	4b07      	ldr	r3, [pc, #28]	@ (8002c1c <vPortFree+0xc4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3301      	adds	r3, #1
 8002c02:	4a06      	ldr	r2, [pc, #24]	@ (8002c1c <vPortFree+0xc4>)
 8002c04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002c06:	f7fe fc67 	bl	80014d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20004a58 	.word	0x20004a58
 8002c18:	20004a48 	.word	0x20004a48
 8002c1c:	20004a54 	.word	0x20004a54

08002c20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002c2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002c2c:	4b27      	ldr	r3, [pc, #156]	@ (8002ccc <prvHeapInit+0xac>)
 8002c2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00c      	beq.n	8002c54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3307      	adds	r3, #7
 8002c3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0307 	bic.w	r3, r3, #7
 8002c46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ccc <prvHeapInit+0xac>)
 8002c50:	4413      	add	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c58:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd0 <prvHeapInit+0xb0>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd0 <prvHeapInit+0xb0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4413      	add	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0307 	bic.w	r3, r3, #7
 8002c7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a15      	ldr	r2, [pc, #84]	@ (8002cd4 <prvHeapInit+0xb4>)
 8002c80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002c82:	4b14      	ldr	r3, [pc, #80]	@ (8002cd4 <prvHeapInit+0xb4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2200      	movs	r2, #0
 8002c88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c8a:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <prvHeapInit+0xb4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	1ad2      	subs	r2, r2, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <prvHeapInit+0xb4>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd8 <prvHeapInit+0xb8>)
 8002cae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4a09      	ldr	r2, [pc, #36]	@ (8002cdc <prvHeapInit+0xbc>)
 8002cb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002cb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <prvHeapInit+0xc0>)
 8002cba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002cbe:	601a      	str	r2, [r3, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	20000e3c 	.word	0x20000e3c
 8002cd0:	20004a3c 	.word	0x20004a3c
 8002cd4:	20004a44 	.word	0x20004a44
 8002cd8:	20004a4c 	.word	0x20004a4c
 8002cdc:	20004a48 	.word	0x20004a48
 8002ce0:	20004a58 	.word	0x20004a58

08002ce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002cec:	4b28      	ldr	r3, [pc, #160]	@ (8002d90 <prvInsertBlockIntoFreeList+0xac>)
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e002      	b.n	8002cf8 <prvInsertBlockIntoFreeList+0x14>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d8f7      	bhi.n	8002cf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d108      	bne.n	8002d26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	441a      	add	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	441a      	add	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d118      	bne.n	8002d6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <prvInsertBlockIntoFreeList+0xb0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d00d      	beq.n	8002d62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	441a      	add	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e008      	b.n	8002d74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d62:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <prvInsertBlockIntoFreeList+0xb0>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e003      	b.n	8002d74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d002      	beq.n	8002d82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20004a3c 	.word	0x20004a3c
 8002d94:	20004a44 	.word	0x20004a44

08002d98 <clock_init>:
#include "clock.h"

void clock_init(){
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0

	/* No crystal on board - HSI as clock source */
	RCC->CR |= RCC_CR_HSION;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <clock_init+0x28>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a07      	ldr	r2, [pc, #28]	@ (8002dc0 <clock_init+0x28>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6013      	str	r3, [r2, #0]

	/* Wait until clock source is stable */
	while ( !(RCC->CR & RCC_CR_HSIRDY)){}
 8002da8:	bf00      	nop
 8002daa:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <clock_init+0x28>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f9      	beq.n	8002daa <clock_init+0x12>

	/* Later stages */
	SystemCoreClockUpdate();
 8002db6:	f000 f881 	bl	8002ebc <SystemCoreClockUpdate>

	/* When the Ethernet is in use AHB frequency must be at least 25 MHz */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800

08002dc4 <gpio_init>:
#include "gpio.h"

void gpio_init(){
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0

	/* Enable clock access to GPIOB */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <gpio_init+0x34>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002df8 <gpio_init+0x34>)
 8002dce:	f043 0302 	orr.w	r3, r3, #2
 8002dd2:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Set output mode */
	GPIOB->MODER &= ~GPIO_MODER_MODER0_Msk;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <gpio_init+0x38>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a08      	ldr	r2, [pc, #32]	@ (8002dfc <gpio_init+0x38>)
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1UL << GPIO_MODER_MODER0_Pos);
 8002de0:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <gpio_init+0x38>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a05      	ldr	r2, [pc, #20]	@ (8002dfc <gpio_init+0x38>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6013      	str	r3, [r2, #0]
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020400 	.word	0x40020400

08002e00 <gpio_toggle>:

void gpio_toggle(){
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

	/* Toggle GPIOB0 */
	GPIOB->ODR ^= GPIO_ODR_OD0;
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <gpio_toggle+0x1c>)
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	4a04      	ldr	r2, [pc, #16]	@ (8002e1c <gpio_toggle+0x1c>)
 8002e0a:	f083 0301 	eor.w	r3, r3, #1
 8002e0e:	6153      	str	r3, [r2, #20]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40020400 	.word	0x40020400

08002e20 <basic_task>:
#include "basic_task.h"

void basic_task(){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0

	while(1){
	gpio_toggle();
 8002e24:	f7ff ffec 	bl	8002e00 <gpio_toggle>
	vTaskDelay(500);
 8002e28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e2c:	f7fe faa0 	bl	8001370 <vTaskDelay>
	while(1){
 8002e30:	bf00      	nop
 8002e32:	e7f7      	b.n	8002e24 <basic_task+0x4>

08002e34 <main>:
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

int main(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0


	clock_init();
 8002e38:	f7ff ffae 	bl	8002d98 <clock_init>
	gpio_init();
 8002e3c:	f7ff ffc2 	bl	8002dc4 <gpio_init>

	/* Enable SysTick interrupt */
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8002e40:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <main+0x54>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a10      	ldr	r2, [pc, #64]	@ (8002e88 <main+0x54>)
 8002e46:	f043 0304 	orr.w	r3, r3, #4
 8002e4a:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <main+0x54>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0d      	ldr	r2, [pc, #52]	@ (8002e88 <main+0x54>)
 8002e52:	f043 0302 	orr.w	r3, r3, #2
 8002e56:	6013      	str	r3, [r2, #0]
	SysTick->LOAD = (SystemCoreClock & 0x00FFFFFF) - 1;
 8002e58:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <main+0x58>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e60:	4a09      	ldr	r2, [pc, #36]	@ (8002e88 <main+0x54>)
 8002e62:	3b01      	subs	r3, #1
 8002e64:	6053      	str	r3, [r2, #4]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8002e66:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <main+0x54>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a07      	ldr	r2, [pc, #28]	@ (8002e88 <main+0x54>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6013      	str	r3, [r2, #0]

	osKernelInitialize();
 8002e72:	f7fd fa01 	bl	8000278 <osKernelInitialize>

	osThreadNew(basic_task,NULL,&defaultTask_attributes);
 8002e76:	4a06      	ldr	r2, [pc, #24]	@ (8002e90 <main+0x5c>)
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4806      	ldr	r0, [pc, #24]	@ (8002e94 <main+0x60>)
 8002e7c:	f7fd fa46 	bl	800030c <osThreadNew>

	osKernelStart();
 8002e80:	f7fd fa1e 	bl	80002c0 <osKernelStart>


    /* Loop forever */
	for(;;);
 8002e84:	bf00      	nop
 8002e86:	e7fd      	b.n	8002e84 <main+0x50>
 8002e88:	e000e010 	.word	0xe000e010
 8002e8c:	20000004 	.word	0x20000004
 8002e90:	0800321c 	.word	0x0800321c
 8002e94:	08002e21 	.word	0x08002e21

08002e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <SystemInit+0x20>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea2:	4a05      	ldr	r2, [pc, #20]	@ (8002eb8 <SystemInit+0x20>)
 8002ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	2302      	movs	r3, #2
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002ed6:	4b34      	ldr	r3, [pc, #208]	@ (8002fa8 <SystemCoreClockUpdate+0xec>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d011      	beq.n	8002f0a <SystemCoreClockUpdate+0x4e>
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d844      	bhi.n	8002f76 <SystemCoreClockUpdate+0xba>
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <SystemCoreClockUpdate+0x3e>
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d004      	beq.n	8002f02 <SystemCoreClockUpdate+0x46>
 8002ef8:	e03d      	b.n	8002f76 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002efa:	4b2c      	ldr	r3, [pc, #176]	@ (8002fac <SystemCoreClockUpdate+0xf0>)
 8002efc:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb0 <SystemCoreClockUpdate+0xf4>)
 8002efe:	601a      	str	r2, [r3, #0]
      break;
 8002f00:	e03d      	b.n	8002f7e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002f02:	4b2a      	ldr	r3, [pc, #168]	@ (8002fac <SystemCoreClockUpdate+0xf0>)
 8002f04:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb4 <SystemCoreClockUpdate+0xf8>)
 8002f06:	601a      	str	r2, [r3, #0]
      break;
 8002f08:	e039      	b.n	8002f7e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002f0a:	4b27      	ldr	r3, [pc, #156]	@ (8002fa8 <SystemCoreClockUpdate+0xec>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	0d9b      	lsrs	r3, r3, #22
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f16:	4b24      	ldr	r3, [pc, #144]	@ (8002fa8 <SystemCoreClockUpdate+0xec>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f1e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00c      	beq.n	8002f40 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002f26:	4a23      	ldr	r2, [pc, #140]	@ (8002fb4 <SystemCoreClockUpdate+0xf8>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa8 <SystemCoreClockUpdate+0xec>)
 8002f30:	6852      	ldr	r2, [r2, #4]
 8002f32:	0992      	lsrs	r2, r2, #6
 8002f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e00b      	b.n	8002f58 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002f40:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb0 <SystemCoreClockUpdate+0xf4>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	4a17      	ldr	r2, [pc, #92]	@ (8002fa8 <SystemCoreClockUpdate+0xec>)
 8002f4a:	6852      	ldr	r2, [r2, #4]
 8002f4c:	0992      	lsrs	r2, r2, #6
 8002f4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002f58:	4b13      	ldr	r3, [pc, #76]	@ (8002fa8 <SystemCoreClockUpdate+0xec>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	0c1b      	lsrs	r3, r3, #16
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	3301      	adds	r3, #1
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	4a0e      	ldr	r2, [pc, #56]	@ (8002fac <SystemCoreClockUpdate+0xf0>)
 8002f72:	6013      	str	r3, [r2, #0]
      break;
 8002f74:	e003      	b.n	8002f7e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002f76:	4b0d      	ldr	r3, [pc, #52]	@ (8002fac <SystemCoreClockUpdate+0xf0>)
 8002f78:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb0 <SystemCoreClockUpdate+0xf4>)
 8002f7a:	601a      	str	r2, [r3, #0]
      break;
 8002f7c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <SystemCoreClockUpdate+0xec>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb8 <SystemCoreClockUpdate+0xfc>)
 8002f8a:	5cd3      	ldrb	r3, [r2, r3]
 8002f8c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002f8e:	4b07      	ldr	r3, [pc, #28]	@ (8002fac <SystemCoreClockUpdate+0xf0>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	4a04      	ldr	r2, [pc, #16]	@ (8002fac <SystemCoreClockUpdate+0xf0>)
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	20000004 	.word	0x20000004
 8002fb0:	00f42400 	.word	0x00f42400
 8002fb4:	017d7840 	.word	0x017d7840
 8002fb8:	08003240 	.word	0x08003240

08002fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002fbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ff4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fc0:	f7ff ff6a 	bl	8002e98 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fc4:	480c      	ldr	r0, [pc, #48]	@ (8002ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fc6:	490d      	ldr	r1, [pc, #52]	@ (8002ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fcc:	e002      	b.n	8002fd4 <LoopCopyDataInit>

08002fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fd2:	3304      	adds	r3, #4

08002fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd8:	d3f9      	bcc.n	8002fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fda:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8003008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe0:	e001      	b.n	8002fe6 <LoopFillZerobss>

08002fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe4:	3204      	adds	r2, #4

08002fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe8:	d3fb      	bcc.n	8002fe2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002fea:	f000 f86f 	bl	80030cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fee:	f7ff ff21 	bl	8002e34 <main>
  bx  lr    
 8002ff2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ff4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ffc:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8003000:	08003258 	.word	0x08003258
  ldr r2, =_sbss
 8003004:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8003008:	20004b9c 	.word	0x20004b9c

0800300c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800300c:	e7fe      	b.n	800300c <ADC_IRQHandler>

0800300e <memset>:
 800300e:	4402      	add	r2, r0
 8003010:	4603      	mov	r3, r0
 8003012:	4293      	cmp	r3, r2
 8003014:	d100      	bne.n	8003018 <memset+0xa>
 8003016:	4770      	bx	lr
 8003018:	f803 1b01 	strb.w	r1, [r3], #1
 800301c:	e7f9      	b.n	8003012 <memset+0x4>
	...

08003020 <_reclaim_reent>:
 8003020:	4b29      	ldr	r3, [pc, #164]	@ (80030c8 <_reclaim_reent+0xa8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4283      	cmp	r3, r0
 8003026:	b570      	push	{r4, r5, r6, lr}
 8003028:	4604      	mov	r4, r0
 800302a:	d04b      	beq.n	80030c4 <_reclaim_reent+0xa4>
 800302c:	69c3      	ldr	r3, [r0, #28]
 800302e:	b1ab      	cbz	r3, 800305c <_reclaim_reent+0x3c>
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	b16b      	cbz	r3, 8003050 <_reclaim_reent+0x30>
 8003034:	2500      	movs	r5, #0
 8003036:	69e3      	ldr	r3, [r4, #28]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	5959      	ldr	r1, [r3, r5]
 800303c:	2900      	cmp	r1, #0
 800303e:	d13b      	bne.n	80030b8 <_reclaim_reent+0x98>
 8003040:	3504      	adds	r5, #4
 8003042:	2d80      	cmp	r5, #128	@ 0x80
 8003044:	d1f7      	bne.n	8003036 <_reclaim_reent+0x16>
 8003046:	69e3      	ldr	r3, [r4, #28]
 8003048:	4620      	mov	r0, r4
 800304a:	68d9      	ldr	r1, [r3, #12]
 800304c:	f000 f872 	bl	8003134 <_free_r>
 8003050:	69e3      	ldr	r3, [r4, #28]
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	b111      	cbz	r1, 800305c <_reclaim_reent+0x3c>
 8003056:	4620      	mov	r0, r4
 8003058:	f000 f86c 	bl	8003134 <_free_r>
 800305c:	6961      	ldr	r1, [r4, #20]
 800305e:	b111      	cbz	r1, 8003066 <_reclaim_reent+0x46>
 8003060:	4620      	mov	r0, r4
 8003062:	f000 f867 	bl	8003134 <_free_r>
 8003066:	69e1      	ldr	r1, [r4, #28]
 8003068:	b111      	cbz	r1, 8003070 <_reclaim_reent+0x50>
 800306a:	4620      	mov	r0, r4
 800306c:	f000 f862 	bl	8003134 <_free_r>
 8003070:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003072:	b111      	cbz	r1, 800307a <_reclaim_reent+0x5a>
 8003074:	4620      	mov	r0, r4
 8003076:	f000 f85d 	bl	8003134 <_free_r>
 800307a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800307c:	b111      	cbz	r1, 8003084 <_reclaim_reent+0x64>
 800307e:	4620      	mov	r0, r4
 8003080:	f000 f858 	bl	8003134 <_free_r>
 8003084:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003086:	b111      	cbz	r1, 800308e <_reclaim_reent+0x6e>
 8003088:	4620      	mov	r0, r4
 800308a:	f000 f853 	bl	8003134 <_free_r>
 800308e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003090:	b111      	cbz	r1, 8003098 <_reclaim_reent+0x78>
 8003092:	4620      	mov	r0, r4
 8003094:	f000 f84e 	bl	8003134 <_free_r>
 8003098:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800309a:	b111      	cbz	r1, 80030a2 <_reclaim_reent+0x82>
 800309c:	4620      	mov	r0, r4
 800309e:	f000 f849 	bl	8003134 <_free_r>
 80030a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80030a4:	b111      	cbz	r1, 80030ac <_reclaim_reent+0x8c>
 80030a6:	4620      	mov	r0, r4
 80030a8:	f000 f844 	bl	8003134 <_free_r>
 80030ac:	6a23      	ldr	r3, [r4, #32]
 80030ae:	b14b      	cbz	r3, 80030c4 <_reclaim_reent+0xa4>
 80030b0:	4620      	mov	r0, r4
 80030b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80030b6:	4718      	bx	r3
 80030b8:	680e      	ldr	r6, [r1, #0]
 80030ba:	4620      	mov	r0, r4
 80030bc:	f000 f83a 	bl	8003134 <_free_r>
 80030c0:	4631      	mov	r1, r6
 80030c2:	e7bb      	b.n	800303c <_reclaim_reent+0x1c>
 80030c4:	bd70      	pop	{r4, r5, r6, pc}
 80030c6:	bf00      	nop
 80030c8:	20000008 	.word	0x20000008

080030cc <__libc_init_array>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003104 <__libc_init_array+0x38>)
 80030d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003108 <__libc_init_array+0x3c>)
 80030d2:	1b64      	subs	r4, r4, r5
 80030d4:	10a4      	asrs	r4, r4, #2
 80030d6:	2600      	movs	r6, #0
 80030d8:	42a6      	cmp	r6, r4
 80030da:	d109      	bne.n	80030f0 <__libc_init_array+0x24>
 80030dc:	4d0b      	ldr	r5, [pc, #44]	@ (800310c <__libc_init_array+0x40>)
 80030de:	4c0c      	ldr	r4, [pc, #48]	@ (8003110 <__libc_init_array+0x44>)
 80030e0:	f000 f87e 	bl	80031e0 <_init>
 80030e4:	1b64      	subs	r4, r4, r5
 80030e6:	10a4      	asrs	r4, r4, #2
 80030e8:	2600      	movs	r6, #0
 80030ea:	42a6      	cmp	r6, r4
 80030ec:	d105      	bne.n	80030fa <__libc_init_array+0x2e>
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
 80030f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f4:	4798      	blx	r3
 80030f6:	3601      	adds	r6, #1
 80030f8:	e7ee      	b.n	80030d8 <__libc_init_array+0xc>
 80030fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80030fe:	4798      	blx	r3
 8003100:	3601      	adds	r6, #1
 8003102:	e7f2      	b.n	80030ea <__libc_init_array+0x1e>
 8003104:	08003250 	.word	0x08003250
 8003108:	08003250 	.word	0x08003250
 800310c:	08003250 	.word	0x08003250
 8003110:	08003254 	.word	0x08003254

08003114 <__retarget_lock_acquire_recursive>:
 8003114:	4770      	bx	lr

08003116 <__retarget_lock_release_recursive>:
 8003116:	4770      	bx	lr

08003118 <memcpy>:
 8003118:	440a      	add	r2, r1
 800311a:	4291      	cmp	r1, r2
 800311c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003120:	d100      	bne.n	8003124 <memcpy+0xc>
 8003122:	4770      	bx	lr
 8003124:	b510      	push	{r4, lr}
 8003126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800312a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800312e:	4291      	cmp	r1, r2
 8003130:	d1f9      	bne.n	8003126 <memcpy+0xe>
 8003132:	bd10      	pop	{r4, pc}

08003134 <_free_r>:
 8003134:	b538      	push	{r3, r4, r5, lr}
 8003136:	4605      	mov	r5, r0
 8003138:	2900      	cmp	r1, #0
 800313a:	d041      	beq.n	80031c0 <_free_r+0x8c>
 800313c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003140:	1f0c      	subs	r4, r1, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	bfb8      	it	lt
 8003146:	18e4      	addlt	r4, r4, r3
 8003148:	f000 f83e 	bl	80031c8 <__malloc_lock>
 800314c:	4a1d      	ldr	r2, [pc, #116]	@ (80031c4 <_free_r+0x90>)
 800314e:	6813      	ldr	r3, [r2, #0]
 8003150:	b933      	cbnz	r3, 8003160 <_free_r+0x2c>
 8003152:	6063      	str	r3, [r4, #4]
 8003154:	6014      	str	r4, [r2, #0]
 8003156:	4628      	mov	r0, r5
 8003158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800315c:	f000 b83a 	b.w	80031d4 <__malloc_unlock>
 8003160:	42a3      	cmp	r3, r4
 8003162:	d908      	bls.n	8003176 <_free_r+0x42>
 8003164:	6820      	ldr	r0, [r4, #0]
 8003166:	1821      	adds	r1, r4, r0
 8003168:	428b      	cmp	r3, r1
 800316a:	bf01      	itttt	eq
 800316c:	6819      	ldreq	r1, [r3, #0]
 800316e:	685b      	ldreq	r3, [r3, #4]
 8003170:	1809      	addeq	r1, r1, r0
 8003172:	6021      	streq	r1, [r4, #0]
 8003174:	e7ed      	b.n	8003152 <_free_r+0x1e>
 8003176:	461a      	mov	r2, r3
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	b10b      	cbz	r3, 8003180 <_free_r+0x4c>
 800317c:	42a3      	cmp	r3, r4
 800317e:	d9fa      	bls.n	8003176 <_free_r+0x42>
 8003180:	6811      	ldr	r1, [r2, #0]
 8003182:	1850      	adds	r0, r2, r1
 8003184:	42a0      	cmp	r0, r4
 8003186:	d10b      	bne.n	80031a0 <_free_r+0x6c>
 8003188:	6820      	ldr	r0, [r4, #0]
 800318a:	4401      	add	r1, r0
 800318c:	1850      	adds	r0, r2, r1
 800318e:	4283      	cmp	r3, r0
 8003190:	6011      	str	r1, [r2, #0]
 8003192:	d1e0      	bne.n	8003156 <_free_r+0x22>
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	6053      	str	r3, [r2, #4]
 800319a:	4408      	add	r0, r1
 800319c:	6010      	str	r0, [r2, #0]
 800319e:	e7da      	b.n	8003156 <_free_r+0x22>
 80031a0:	d902      	bls.n	80031a8 <_free_r+0x74>
 80031a2:	230c      	movs	r3, #12
 80031a4:	602b      	str	r3, [r5, #0]
 80031a6:	e7d6      	b.n	8003156 <_free_r+0x22>
 80031a8:	6820      	ldr	r0, [r4, #0]
 80031aa:	1821      	adds	r1, r4, r0
 80031ac:	428b      	cmp	r3, r1
 80031ae:	bf04      	itt	eq
 80031b0:	6819      	ldreq	r1, [r3, #0]
 80031b2:	685b      	ldreq	r3, [r3, #4]
 80031b4:	6063      	str	r3, [r4, #4]
 80031b6:	bf04      	itt	eq
 80031b8:	1809      	addeq	r1, r1, r0
 80031ba:	6021      	streq	r1, [r4, #0]
 80031bc:	6054      	str	r4, [r2, #4]
 80031be:	e7ca      	b.n	8003156 <_free_r+0x22>
 80031c0:	bd38      	pop	{r3, r4, r5, pc}
 80031c2:	bf00      	nop
 80031c4:	20004b98 	.word	0x20004b98

080031c8 <__malloc_lock>:
 80031c8:	4801      	ldr	r0, [pc, #4]	@ (80031d0 <__malloc_lock+0x8>)
 80031ca:	f7ff bfa3 	b.w	8003114 <__retarget_lock_acquire_recursive>
 80031ce:	bf00      	nop
 80031d0:	20004b94 	.word	0x20004b94

080031d4 <__malloc_unlock>:
 80031d4:	4801      	ldr	r0, [pc, #4]	@ (80031dc <__malloc_unlock+0x8>)
 80031d6:	f7ff bf9e 	b.w	8003116 <__retarget_lock_release_recursive>
 80031da:	bf00      	nop
 80031dc:	20004b94 	.word	0x20004b94

080031e0 <_init>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	bf00      	nop
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr

080031ec <_fini>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	bf00      	nop
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr
